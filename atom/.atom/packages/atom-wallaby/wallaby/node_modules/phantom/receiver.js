// Generated by CoffeeScript 1.7.1
(function() {
  var dnode, http, onSignal, phanta, shoe, spawn, startPhantomProcess, wrap,
    __slice = [].slice;

  dnode = require('dnode');

  http = require('http');

  shoe = require('shoe');

  spawn = require('win-spawn');

  phanta = [];

  startPhantomProcess = function(binary, port, hostname, args) {
    return spawn(binary, args.concat([__dirname + '/shim.js', port, hostname]));
  };

  onSignal = function() {
    var phantom, _i, _len;
    for (_i = 0, _len = phanta.length; _i < _len; _i++) {
      phantom = phanta[_i];
      phantom.exit();
    }
    return process.exit();
  };

  process.on('exit', function() {
    var phantom, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = phanta.length; _i < _len; _i++) {
      phantom = phanta[_i];
      _results.push(phantom.exit());
    }
    return _results;
  });

  process.on('SIGINT', onSignal);

  process.on('SIGTERM', onSignal);

  wrap = function(ph) {
    ph.callback = function(fn) {
      return '__phantomCallback__' + fn.toString();
    };
    ph._createPage = ph.createPage;
    return ph.createPage = function(cb) {
      return ph._createPage(function(page) {
        page._evaluate = page.evaluate;
        page.evaluate = function() {
          var args, cb, fn;
          fn = arguments[0], cb = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          return page._evaluate.apply(page, [fn.toString(), cb].concat(args));
        };
        page._onResourceRequested = page.onResourceRequested;
        page.onResourceRequested = function() {
          var args, cb, fn;
          fn = arguments[0], cb = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          return page._onResourceRequested.apply(page, [fn.toString(), cb].concat(args));
        };
        return cb(page);
      });
    };
  };

  module.exports = {
    create: function() {
      var arg, args, cb, httpServer, key, options, phantom, ps, sock, value, _i, _len, _ref;
      args = [];
      options = {};
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        switch (typeof arg) {
          case 'function':
            cb = arg;
            break;
          case 'string':
            args.push(arg);
            break;
          case 'object':
            options = arg;
        }
      }
      if (typeof options.parameters === 'object') {
        _ref = options.parameters;
        for (key in _ref) {
          value = _ref[key];
          args.push('--' + key + '=' + value);
        }
      }
      if (options.path == null) {
        options.path = '';
      }
      if (options.binary == null) {
        options.binary = options.path + 'phantomjs';
      }
      if (options.port == null) {
        options.port = 0;
      }
      if (options.hostname == null) {
        options.hostname = 'localhost';
      }
      if (options.dnodeOpts == null) {
        options.dnodeOpts = {};
      }
      ps = null;
      phantom = null;
      httpServer = http.createServer();
      httpServer.listen(options.port, options.hostname);
      httpServer.on('listening', function() {
        var hostname, port;
        port = httpServer.address().port;
        hostname = httpServer.address().address;
        ps = startPhantomProcess(options.binary, port, hostname, args);
        ps.stdout.on('data', options.onStdout || function(data) {
          return console.log("phantom stdout: " + data);
        });
        ps.stderr.on('data', options.onStderr || function(data) {
          return module.exports.stderrHandler(data.toString('utf8'));
        });
        ps.on('error', function(err) {
          httpServer.close();
          if ((err != null ? err.code : void 0) === 'ENOENT') {
            return console.error("phantomjs-node: You don't have 'phantomjs' installed");
          } else {
            throw err;
          }
        });
        return ps.on('exit', function(code, signal) {
          var p;
          httpServer.close();
          if (phantom) {
            if (typeof phantom.onExit === "function") {
              phantom.onExit();
            }
            phanta = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = phanta.length; _j < _len1; _j++) {
                p = phanta[_j];
                if (p !== phantom) {
                  _results.push(p);
                }
              }
              return _results;
            })();
          }
          if (options.onExit) {
            return options.onExit(code, signal);
          } else {
            console.assert(signal == null, "signal killed phantomjs: " + signal);
            return console.assert(code === 0, "abnormal phantomjs exit code: " + code);
          }
        });
      });
      sock = shoe(function(stream) {
        var d;
        d = dnode({}, options.dnodeOpts);
        d.on('remote', function(phantom) {
          wrap(phantom);
          phantom.process = ps;
          phanta.push(phantom);
          return typeof cb === "function" ? cb(phantom) : void 0;
        });
        d.pipe(stream);
        return stream.pipe(d);
      });
      return sock.install(httpServer, '/dnode');
    },
    stderrHandler: function(message) {
      if (message.match(/(No such method.*socketSentData)|(CoreText performance note)/)) {
        return;
      }
      return console.warn("phantom stderr: " + message);
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,IWZ1bmN0aW9uIGUodCxpLG4pe2Z1bmN0aW9uIHMoYSxvKXtpZighaVthXSl7aWYoIXRbYV0pe3ZhciBsPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFvJiZsKXJldHVybiBsKGEsITApO2lmKHIpcmV0dXJuIHIoYSwhMCk7dmFyIHU9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrYSsiJyIpO3Rocm93IHUuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsdX12YXIgYz1pW2FdPXtleHBvcnRzOnt9fTt0W2FdWzBdLmNhbGwoYy5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBpPXRbYV1bMV1bZV07cmV0dXJuIHMoaT9pOmUpfSxjLGMuZXhwb3J0cyxlLHQsaSxuKX1yZXR1cm4gaVthXS5leHBvcnRzfXZhciByPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO21vZHVsZS5leHBvcnRzPXMoblswXSl9KHsxOltmdW5jdGlvbihlLHQsaSl7InVzZSBzdHJpY3QiO3ZhciBuPWUoInBhdGgiKTt0LmV4cG9ydHM9e2NyZWF0ZTpmdW5jdGlvbih0LGkpe2lmKCFpKXJldHVybiBlKCIuL2V4dGVuc2lvbi9jb3JlIik7dmFyIHM9ZnVuY3Rpb24oKXt2YXIgcz1lKCIuL2V4dGVuc2lvbi9zZXJ2ZXIvbXVsdGljYXN0ZXIiKSxyPTJlMztyZXR1cm4gdC5saWNlbnNlJiZ0LmxpY2Vuc2UhPT1pLl93YWxsYWJ5RW1haWwmJiFmdW5jdGlvbigpe3ZhciBlPXNldEludGVydmFsKGZ1bmN0aW9uKCl7cy5lbWl0KCJsaWNlbnNlLnVzZSIsdC5saWNlbnNlKX0scik7cy5vbigibGljZW5zZS51c2UiLGZ1bmN0aW9uKGUsbil7dC5saWNlbnNlJiZlJiZ0LmxpY2Vuc2U9PT1lJiZpLl9lbWl0KHt0eXBlOiJsaWNlbnNlQ29sbGlzaW9uIixhZGRyZXNzOm59KX0pLGkuX211bHRpY2FzdGVyPXtzdG9wOmZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbChlKSxzLnN0b3AoKX19fSgpLHt2OnQubGljZW5zZT9RLndoZW4oITApOmkuX2ZpbGVTdGF0UHJvbWlzZShuLmRpcm5hbWUoaS5fcGhhbnRvbWpzKSkuZmFpbChmdW5jdGlvbigpe3JldHVybiBRLndoZW4oe30pfSkudGhlbihmdW5jdGlvbihlKXtpZihlJiZlLm10aW1lKXt2YXIgdD1lLm10aW1lO2lmKHQuc2V0RGF0ZShlLm10aW1lLmdldERhdGUoKSszMCksbmV3IERhdGU+dClyZXR1cm4gUS5yZWplY3Qoe21lc3NhZ2U6Im1vYy5zanliYWxsYXdAb2xsZWggdGEgbGlhbWUgYWl2IHN1IHRjYXRub2MgZXNhZWxwICxtYWV0IHJ1b3kgcm8gZmxlc3J1b3kgcm9mIGRvaXJlcCBsYWlydCByZWdub2wgYSBlZ25hcnJhIG90IGVraWwgZGx1b3cgdW95IGZJXG4uZXNuZWNpbCBhIGVzYWhjcnVwIG90IGVzYWhjcnVwL21vYy5zanliYWxsYXcvLzpwdHRoIHRhIGV0aXNiZXcgcnVvIHRpc2l2IGVzYWVscCAsdGNlam9ycCBlaHQgdHJvcHB1cyBkbmEgdGkgZ25pc3UgZXVuaXRub2Mgb3QgZWtpbCBkbHVvdyB1b3kgZG5hICx5dGl2aXRjdWRvcnAgcnVveSBkZXNhZXJjbmkgc2FoIHNqLnliYWxsYXcgZklcbi50dW8gdGkgZ25peXJ0IHJvZiBza25haHQgLHJldm8gc2kgZG9pcmVwIGxhaXJ0IHNqLnliYWxsYXcgcnVvWSIuc3BsaXQoIiIpLnJldmVyc2UoKS5qb2luKCIiKSxub0RldGFpbHM6ITB9KX1yZXR1cm4gUS53aGVuKCEwKX0pfX0oKTtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIHM/cy52OnZvaWQgMH19fSx7Ii4vZXh0ZW5zaW9uL2NvcmUiOjIsIi4vZXh0ZW5zaW9uL3NlcnZlci9tdWx0aWNhc3RlciI6MTAscGF0aDp2b2lkIDB9XSwyOltmdW5jdGlvbihlLHQsaSl7InVzZSBzdHJpY3QiO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaSBpbiB0KXt2YXIgbj10W2ldO24uY29uZmlndXJhYmxlPSEwLG4udmFsdWUmJihuLndyaXRhYmxlPSEwKX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLHQpfXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpLHM9ZnVuY3Rpb24gRihlLHQsaSl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpO2lmKHZvaWQgMD09PW4pe3ZhciBzPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PXM/dm9pZCAwOkYocyx0LGkpfWlmKCJ2YWx1ZSJpbiBuJiZuLndyaXRhYmxlKXJldHVybiBuLnZhbHVlO3ZhciByPW4uZ2V0O2lmKHZvaWQgMCE9PXIpcmV0dXJuIHIuY2FsbChpKX0scj1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihlLl9fcHJvdG9fXz10KX0sYT1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxvPWUoImNyeXB0byIpLGw9ZSgidGltZXJzIikuc2V0VGltZW91dCx1PWUoInRpbWVycyIpLmNsZWFyVGltZW91dCxjPWUoIi4vc2VydmVyL2ZpbGVTeXN0ZW0iKSxoPWUoIi4vc2VydmVyL3RyYWNrZWRTb3VyY2VGaWxlIiksZj1lKCIuL3NlcnZlci9jb3ZlcmFibGVSYW5nZSIpLGQ9ZSgiLi9zZXJ2ZXIvZXhlY3V0ZWRUZXN0Iiksdj1lKCIuL3NlcnZlci9jb25zb2xlTWVzc2FnZSIpLHA9ZSgiLi9zZXJ2ZXIvc3RhdHMiKSxnPWUoIi4vc2VydmVyL2Vycm9yRW50cnkiKSxtPShlKCIuL3NlcnZlci9zdGFja0VudHJ5IiksZSgiLi9zaGFyZWQvdXRpbHMiKSkseT12b2lkIDAsYj02ZTUsVD03ZTMsdz01LEU9ImFjdGl2YXRlLWxpbmsiLFI9ImNvbnRpbnVlLXRyaWFsLWxpbmsiLGo9IkZyZWVkb20iLEk9e0F0b206Ii0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXG5NSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXF5ZFFCWnBlNHZQbVd2SDJ5cmlIXG44Zi9CbW9rcWNsRHFKTkpVQ29WK1JRYXcxNnJ0L2kza1JVVUhxWVhWMW96eFB2UXNOekFwUHJhcCsyMU1xVlRUXG5nenBTSkI2SG5oWWFiQU9NYWh1dnphWmx4dEVVVkFvZFp3R1huN2JkREw2dGI3V0lqb2hoR215ZnNES3YrMnBpXG5WVm5CUCtxR1JYdHRhdE55S2swbVRPZmJVYjgwbXNxNlMzTW5maE04U3VPbzgzK3hZL3RaNWlQR3d6ajExYlNGXG50dmtiTUFjWDNZY0tob0ZSbXk4S2dEdU94alE4bWU4MkR5NlNnc2hsc2FlOC8yU05WejBpTWNnQ0lUQVNYT3VYXG4wRjBRRkNyZWp4WFRUemdoN1RCZTlhNHg1MWlZS01mTTF3cXFYaFYvM3ljc3pIWnJ3R0VmOEZjbzczTFd0Zm9tXG5Id0lEQVFBQlxuLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tIixWU0NvZGU6Ii0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXG5NSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdmMFJuNnJnRk1WTnVhZWczS2c5XG5rakxOVVQ4WjJmbklyalVoREdNOEZTN281azROVDFGZHpucXNvQnByTGRyTFJka016akg4SVByckVVNXJLaVdsXG5WTzBpS1U3UTdBbU1mQVRTdGV6dmZ5czBBQWwrbzNmL2tRaVNaeEQyVTVQL0szOGtsWXB3ZjlMOE1NdGhBZUVGXG55NHh6QTVlQnVQekJkUkh4dlV3VXFoQ0I5bzczWjRNYXhIbnJhejVoeDBmNmFnRWRMVlU2WHNOa281d1huOFpOXG5QNkJia09PbS9IZ1U4S2tXdUpiVTU4eWdYeFBmL2ZuWkh1Mmd0dnJ6L3JOZW1vWFkxZkR5ZGl6TnhEeStaUGdQXG5pd2VTZHFuTGhsRm9KRXV4bkl3b1BsWU03SndLaDNKaWhPekFxUVE1VTVKa001ZS9tRlEvbEZxQ1Z4TWxtQlFXXG5Wd0lEQVFBQlxuLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tIixTdWJsaW1lOiItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1MUVFRFp6USsrbDZ0ejJpb0NQYVxuSHhPU2NqeTJrUkRkUG9YdVE4OHpaRzZWZXZ4cW1JemFkSFBGR2pWNXAzWm04T1k5UitTZjYxa2R6Ulp6dldSZ1xueG9ybGFub09sdXR2ZkJmRzJsa3YySjRIL0I3NVhwb0FlR3ZkdklsT01vRHhmd2oydk1JUTRvSE5hQ0oyeStPL1xuaW9oVEZPQzA3blk3dWYyc2EwdXNPQVo3emcrYlh5ejYzL2Z1U2VWb3VGQ0tHZVlLdnExWUM5OTFGMkhqMFRoTVxueHhlbGxjNngxQWFGdXl5RzVIbWRZcWJ1S05TK2lBdDd3OHBZVEpvWHhpOWpFMDIxNEdmMHNic0ZuQWJCRmoyc1xua09hZWU0UFNwbHlTWlhFbVlSZXBQMSt3NmFEa3ViVnRzSE12RnQrQXI0d3U0ZEx1QWo3Uzh5eFZWcktFRzlSelxuNHdJREFRQUJcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLSIsRnJlZWRvbToiLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cbk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNHBEb3RlanR6aGlUL2xwTmZkMEhcbjJEdjA4TlRTSjgvaXh1UXozaUppVlJ4UWtvdDVTbjQ1d3U0UWlRRW9ZNU5RL3REZjhWOW1EZWVQTlUvWmQ4S1lcbmR5UkZvcTZid09sSGMwSEFhNTB0ZWNSQ0VDRVNCK3QzVFZjcUxNb2dYMzJ2Z1FrU21seTBzRnh0R0ZCak44V3hcblYrUTdXUThuZWZ0N0pLYVh0bSsyRnQ3UDQxb25kK1NmQmVUb2g5bW45REZmdCtPdUkydno3czBPU2pkK1AyYndcbitHRUlyM290bDNDQTVScklIOVdSc0FWamF3dit6NUx2YWtRWHRPNkpOTm1KZ0VySFdabWtCSWx2MlZIRHNvU2Rcbk1MZ2EyalRpRUhya1p5bEtQRm96L2hPZGgvaVZINC9yMUFXeEJoajhJZ1FsUmNMSmd2U0J6Sm80T2xCaGxZaDZcbnh3SURBUUFCXG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0ifSxNPXsiUTBkQ0lFVnVkR1Z5Y0hKcGMyVnpJQ055WVhKNk5BcGthVzVoYUM1d2JHRnVZMmhoY21SQVkyZGlMbU52YlN4WFlXeHNZV0o1TG1weklHTnZiWEJoYm5rZ2JHbGpaVzV6WlNBb1ZsTWdRMjlrWlNrS01URXZNRFV2TWpBeE53cE9UMlpVYURaV05VeEdZblZGU1U1emJVeFlSVEozT1ZNek1UWmpTSGhsVlZwR1RXSkRjRE0zUml0MFIzSnNURkZ3YmxwRGIxWkZRbnBEVFVOUWRqWkVhVFJXTVRGTFVFNU1TR2w0WkdkM2NrTkdlRGhQVUZCT05qUTRjMnBKTVhwV1RVbDBUWEJyUkhSaUx5dExkelI2TW1KU1NVRjJjRWwyWnl0NFIwNXZRMUl6VjBOT1NUbGhXV1UxVlhCM1VVRjNkR0YyYTJkaVUwOWtkSGRHYW0xSkwyMXBVekJYTm1wWFlVZDFUblJDUjNWa1JWTlZjbXBOTUZSbE0zUmpSbEJEVFZSM01GSllOWGxwU1hKc1pWTmtRa3BWZUU5VFdreFRjR1l3WjJ3MVlWa3JUWE5MVlRrNGRIcE5hbFYxYzJ0R1pHczNTWFpxVkUxbFEwdE1iMXA2ZDJoM01YUkxNVzExY0ZCT2JVTmlWVWQxYTFNcmQxUlZSbEpXVUVGdmJFTnpWSHBITDFKRVJXaFdkMk5MWmt3ck9DOXlSMDExVVVKck5GWjRaelpDY25wcE9IbzVXVXBNUkhac2EyaGtja0ZPZGtGWFpuYzlQUT09IjoxLFFXMWhlbTl1SUVOdmNuQnZjbUYwWlNCTVRFTWdJM2hoWlRsMkNtRnNaWGhmYzJOb2FXTnJiR2x1WjBCemFHa3VZMjl0TEZkaGJHeGhZbmt1YW5NZ1kyOXRjR0Z1ZVNCc2FXTmxibk5sSUNoQmRHOXRLUW95Tnk4d05DOHlNREUzQ2tWalNHdDJLMWhyZVc1amVGSkVXVmRGVUZGaWJ6ZFlWbXhxVUVRM1ZHNHdlakJ3ZW0xRVpTczNiMjVQVlhCbllUVkJjMnRMU1RBeWNrUlVXU3RGSzJSV05DOXBMMlpoV0c0d2RsRnFkRUozTjBWU2EzZE1NM2RYVlRGTmVISjROVTFvYUhOdWRsb3lTak5NWTNCcWIybDFNbFJLYUd4aVVIbEpNWFpXUnk5R1FVNDNXRFZ0VjBWc2RYSnVVbEZIYWxkQmNGZE9VME5DTDJZNFVHWmxaRlZpYlVOdWFTOXpaVzVOT0RsUlRuSXJXRE0wWnpCamFqZGFRMUV6V1ZoMmJ6ZDBTMDF3TTFGcmQyNVBlVWhvZVRCdE5DdDFhVGhZWkVwWVJrODRVelJxV0ZOUFNFa3ZlaXR5TlRNeVYwRXZTVUZMZVV0dE0xZzBWV2xUV21sTVZITk1ka1kxTlVaaVIya3hTbFl4WVd4UGVVWnJSSEJXVG5oNFNqSkxVVVJQTW5sRk0yOHJZMmxzWWxZNE1tdFRkeXN4ZEVac0x6WnROMnh1YjNkaE0wTklXbXRPZFZoWWVsZEZMMHczT1VFd1IwaGlPRVp4WnowOToxLCJTblZ6ZEdsdUlFeGxaRzkxZUFwcWRYTjBhVzR1YkdWa2IzVjRRR3AxYzNScGJuZGxZaTV3Y204c1YyRnNiR0ZpZVM1cWN5QndaWEp6YjI1aGJDQnNhV05sYm5ObElDaFRkV0pzYVcxbElGUmxlSFFwQ2pBMkx6QTJMekl3TVRjS2IybzVkRUZSWVV0dlEwZGFUR3h0WVdkeFpVNHpWRVZDVlc5d1VURnhjR05QVWtsak1IZG5WalVyVkVRek5FNWhhRWRRVldoWGFGVlNZUzlhZEhwc04wVmFiM1YwTXpaalpWSjBUVWN5VWt3d0sybGFOMFpsWTJOU1ZuZ3lWVFJOYlU5dFNHcE9iRUZYWmtOdEt6QTRkRFpWZDJrM1FTOU9kMDlUY2tsdU1rUldXVFp5VjA5alRXbEZTbGs0YVdKWlpYcG5RVmQxZERjclYwRXZUa1l4VjAxMVpFY3ZlbGRuZFZkUE5UbDFRV0ZRZUVkMFJuUlpUamRCVHpkU1drUkRiR0Z5YjNJclMwOU5UbWR6V2pRdlltTTJORU5tVGpONGRXWXlSRTlrVGpCSU4yODJWVXBMYTAxS2FVTndaR05GVFhsVE0xWjFTRkpzUlZaa1ZVMXFNMnBsWmxObFEwMUdSbUZpYkhCWE1GbHpRMlZDUVRVM1dsTjNXWEJJSzA1S05Xa3JhMWxrTTNaamJDdHpjMUZSZVZSSE5XeFpVaXRpTW5GV1dEVkVXbFZWVFhWME1GZFVUWFlyTTBoS1FucE5jRk51VGpaM1BUMD0iOjF9LGs9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gaShlKXthKHRoaXMsaSkscyhPYmplY3QuZ2V0UHJvdG90eXBlT2YoaS5wcm90b3R5cGUpLCJjb25zdHJ1Y3RvciIsdGhpcykuY2FsbCh0aGlzKTt2YXIgdD10aGlzO3RoaXMuX2RpZmZNYXRjaFBhdGNoPWUuZGlmZk1hdGNoUGF0Y2g7dmFyIG49ZS5Qcm9qZWN0O3RoaXMuX3Byb2plY3Q9bmV3IG4oZSksdGhpcy5fcHJvamVjdC5vbigibWVzc2FnZSIsZnVuY3Rpb24oZSl7cmV0dXJuIHRbInByb2plY3Q6IitlLnR5cGVdKGUpfSksdGhpcy5fZnM9bmV3IGModGhpcy5fcHJvamVjdC5fbG9jYWxSb290LGUpLHRoaXMuX2ZpbGVzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fdGVzdFN0YXRzPW5ldyBwLHRoaXMuX3JlYWRGaWxlU3luYz1lLnJlYWRGaWxlU3luYyx0aGlzLl93cml0ZUZpbGVTeW5jPWUud3JpdGVGaWxlU3luYyx0aGlzLl92ZXJpZnlMaWNlbnNlKGUuY2xpZW50LGUubGtwKSx0aGlzLl9hbHdheXNTZW5kQWxsTGluZXM9IlZTQ29kZSI9PT1lLmNsaWVudH1yZXR1cm4gcihpLHQpLG4oaSx7Y29uZmlndXJlOnt2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIGUuX3J1bklmVmVyaWZpZWQoZnVuY3Rpb24oKXtyZXR1cm4gZS5fcHJvamVjdC5jb25maWd1cmUoKX0pfX0sZmlsZUNoYW5nZWRJbkVkaXRvcjp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fZnMuZmlsZUNoYW5nZWRJbkVkaXRvcihlLnBhdGgsZS5jb250ZW50LGUuY2hhbmdlRnJhbWUpfX0sZmlsZU9wZW5lZEluRWRpdG9yOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9maWxlSWRCeVBhdGgoZS5wYXRoKTtpZih0KXt2YXIgaT10aGlzLl9maWxlc1t0XTtpJiYoaS5vcGVuZWRJbkVkaXRvcigpLHRoaXMuX2VtaXREb2N1bWVudExpbmVzKGkpKX19fSxmaWxlQ2xvc2VkSW5BbGxFZGl0b3JzOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9maWxlSWRCeVBhdGgoZS5wYXRoKTtpZih0KXt2YXIgaT10aGlzLl9maWxlc1t0XTtpJiZpLmNsb3NlZEluQWxsRWRpdG9ycygpfX19LHJ1blRlc3RzOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJlcXVlc3QsaT1bXTtpZih0LmZpbGUpe3ZhciBuPXRoaXMuX2ZpbGVJZEJ5UGF0aCh0LmZpbGUpLHM9dGhpcy5fZmlsZXNbbl07cyYmKHQubGluZXx8IXMuaXNUZXN0RmlsZSgpP18uZWFjaCh0LmxpbmU/cy5saW5lVGVzdHModC5saW5lKTpzLmNvdmVyaW5nVGVzdHMoKSxmdW5jdGlvbihlKXtpLnB1c2goW2UuZmlsZUlkKCldLmNvbmNhdChlLnBhdGgoKSkpfSk6aS5wdXNoKFtzLmtleSgpXSkpfXRoaXMuX3Byb2plY3QucnVuVGVzdHMoe3Rlc3RzOmkubGVuZ3RoJiZpfHx2b2lkIDB9KX19LHN0b3A6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZzLnN0b3AoKSx0aGlzLl9wcm9qZWN0LnN0b3AoKX19LHVuY292ZXJlZFJlZ2lvbnM6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVxdWVzdCxpPXt0eXBlOiJ1bmNvdmVyZWRSZWdpb25zIixkYXRhOnt9LGlkOmUuaWR9LG49dGhpcy5fZmlsZXNbdGhpcy5fZmlsZUlkQnlQYXRoKHQuZmlsZSldO3JldHVybiBuPyhpLmRhdGEucmFuZ2VzPV8uY2hhaW4odC5saW5lP24ubGluZVJhbmdlcyh0LmxpbmUpOm4ucmFuZ2VzKCkpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hZS5pc0NvdmVyZWQoKX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm5bZS5zdGFydExpbmUoKSxlLnN0YXJ0Q29sdW1uKCksZS5lbmRMaW5lKCksZS5lbmRDb2x1bW4oKV19KS52YWx1ZSgpLHZvaWQgdGhpcy5fZW1pdChpKSk6dm9pZCB0aGlzLl9lbWl0Tm90aWZpY2F0aW9uKCJpbmZvIiwiQWN0aW9uIGlzIG5vdCBhdmFpbGFibGUgZm9yIGZpbGVzIG91dHNpZGUgd2FsbGFieS5qcyBzY29wZSIpfX0sbGluZVJlcG9ydDp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXF1ZXN0LGk9e3R5cGU6ImxpbmVSZXBvcnQiLGRhdGE6e30saWQ6ZS5pZH0sbj10aGlzLl9maWxlc1t0aGlzLl9maWxlSWRCeVBhdGgodC5maWxlKV07cmV0dXJuIG4/KGkuZGF0YS5yZXBvcnQ9dGhpcy5fdGVzdFN0YXRzLmxpbmVSZXBvcnQobix0LmxpbmUpLHZvaWQgdGhpcy5fZW1pdChpKSk6dm9pZCB0aGlzLl9lbWl0Tm90aWZpY2F0aW9uKCJpbmZvIiwiQWN0aW9uIGlzIG5vdCBhdmFpbGFibGUgZm9yIGZpbGVzIG91dHNpZGUgd2FsbGFieS5qcyBzY29wZSIpfX0sbG9jYXRpb246e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVxdWVzdCxpPXt0eXBlOiJsb2NhdGlvbiIsZGF0YTp7fSxpZDplLmlkfSxuPXRoaXMuX2ZpbGVzW3RoaXMuX2ZpbGVJZEJ5UGF0aCh0LmZpbGUpXSxzPW4mJnQubGluZSYmbi5saW5lQ292ZXJpbmdUZXN0c09yZGVyZWRCeUZhaWxpbmdUaGVuRGF0ZSh0LmxpbmUsZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXNFcnJvclNvdXJjZSgpfHxlLmlzT25FcnJvclBhdGgoKX0pWzBdO2lmKHMmJnMuaXNGYWlsaW5nKCl8fChzPXRoaXMuX3Rlc3RTdGF0cy5sYXRlc3RGYWlsaW5nVGVzdCgpKSxzKWlmKCJmYWlsaW5nVGVzdCI9PT10LnR5cGUpe3ZhciByPXMuc3RhcnRSYW5nZSgpO2lmKHIpcmV0dXJuIGkuZGF0YS5maWxlPXMuZmlsZVBhdGgoKSxpLmRhdGEubG9jPVtyLnN0YXJ0TGluZSgpLHIuc3RhcnRDb2x1bW4oKV0sdm9pZCB0aGlzLl9lbWl0KGkpO3RoaXMuX2VtaXROb3RpZmljYXRpb24oImluZm8iLCJDYW4gbm90IGxvY2F0ZSBhIGZhaWxpbmcgdGVzdCIpfWVsc2UgaWYoImVycm9yU291cmNlIj09PXQudHlwZSl7dmFyIGE9Xy5maW5kKHMuZXJyb3JzKCksZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3RhY2soKS5sZW5ndGh9KSxvPWEuc3RhY2soKVswXSxsPW8ucmFuZ2UoKTtyZXR1cm4gaS5kYXRhLmZpbGU9by5maWxlUGF0aCgpLGwmJihpLmRhdGEubG9jPVtsLnN0YXJ0TGluZSgpLGwuc3RhcnRDb2x1bW4oKV0pLHZvaWQgdGhpcy5fZW1pdChpKX10aGlzLl9lbWl0Tm90aWZpY2F0aW9uKCJpbmZvIiwiQ2FuIG5vdCBmaW5kIGFueSBmYWlsaW5nIHRlc3RzIil9fSxjb250aW51ZVRyaWFsOnt2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2NvbnRpbnVlVHJpYWxTZXNzaW9uJiZ0aGlzLl9jb250aW51ZVRyaWFsU2Vzc2lvbigpfX0sInByb2plY3Q6cHJvamVjdENvbmZpZ3VyZWQiOnt2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10aGlzO3k9ZSgiZGVidWciKSgid2FsbGFieTpleHRlbmRlZC1jb3JlIiksdGhpcy5fZnMuc2V0dXAodC5maWxlcykudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gaS5fc3RhcnQoe2ZpbGVzOmkuX2ZpbGVzRm9yUHJvamVjdChlKX0pfSkuZmFpbChmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKCJGYWlsZWQgdG8gc2V0IHVwIHByb2plY3QgZmlsZSBzeXN0ZW06ICIraS5fZXJyb3JNZXNzYWdlKGUpKSxpLl9lbWl0VGVzdFJ1bkVycm9yKGkuX3Rlc3RSdW5FcnJvck1lc3NhZ2UoZSkpfSksdGhpcy5fZnMub24oImFkZGVkIixfLmJpbmQodGhpcy5fdXBkYXRlUHJvamVjdEZpbGUsdGhpcywhMSkpLHRoaXMuX2ZzLm9uKCJsb2FkZWQiLF8uYmluZCh0aGlzLl91cGRhdGVQcm9qZWN0RmlsZSx0aGlzLCExKSksdGhpcy5fZnMub24oImNoYW5nZWQiLF8uYmluZCh0aGlzLl91cGRhdGVQcm9qZWN0RmlsZSx0aGlzLCExKSksdGhpcy5fZnMub24oImRlbGV0ZWQiLF8uYmluZCh0aGlzLl91cGRhdGVQcm9qZWN0RmlsZSx0aGlzLCEwKSksdGhpcy5fZnMub24oImVycm9yIixmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKCJGaWxlIHN5c3RlbSBlcnJvcjogIitpLl9lcnJvck1lc3NhZ2UoZSkpLGkuX2VtaXRUZXN0UnVuRXJyb3IoaS5fdGVzdFJ1bkVycm9yTWVzc2FnZShlKSl9KSx0aGlzLl9mcy5vbigibm90Q2hhbmdlZCIsZnVuY3Rpb24oZSx0LG4pe3RyeXtpZihuLnN0YXJ0PT09bi5lbmQpcmV0dXJuO3koIkZpbGUgd2FzIG5vdCBjaGFuZ2VkLCBidXQgZmlsZSBtYXJrZXJzIG1heSBuZWVkIHRvIGJlIHN5bmNlZCIpO3ZhciBzPWkuX2ZpbGVzW2UuaWRdO2lmKCFzKXJldHVybjtpLl9lbWl0RG9jdW1lbnRMaW5lcyhzKX1maW5hbGx5e2kuX2VtaXRTdGF0c1VwZGF0ZSgpfX0pfX0sX2VtaXREb2N1bWVudExpbmVzOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1PYmplY3QuY3JlYXRlKG51bGwpO3RbZS5wYXRoKCldPWUuYWxsTGluZXMoKSx0aGlzLl9lbWl0RG9jdW1lbnRVcGRhdGVzKHQpfX0sInByb2plY3Q6dGVzdFJ1bkVycm9yIjp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fdGVzdFN0YXRzLnJlcG9ydEZhaWxlZFJ1bihlLm1lc3NhZ2UpLHRoaXMuX2VtaXRTdGF0c1VwZGF0ZShlLm1lc3NhZ2UpfX0sInByb2plY3Q6dGVzdFJ1blJlUXVldWVkIjp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9lbWl0U3RhdHNVcGRhdGUodGhpcy5fdGVzdFN0YXRzLmZ1bGxSZXBvcnQoKSl9fSwicHJvamVjdDpidXN5Ijp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9lbWl0KHt0eXBlOiJidXN5In0pfX0sInByb2plY3Q6bGl2ZSI6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2VtaXQoZSl9fSwicHJvamVjdDpmaWxlc1JlcXVpcmVkIjp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLl9mcy5sb2FkRmlsZXMoZS5maWxlcykuZmFpbChmdW5jdGlvbihlKXtyZXR1cm4gdC5fZW1pdFRlc3RSdW5FcnJvcih0Ll9lcnJvck1lc3NhZ2UoZSkpfSl9fSwicHJvamVjdDpsaWNlbnNlQ29sbGlzaW9uIjp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9IldhbGxhYnkuanMgaXMgc3RvcHBlZCBiZWNhdXNlIHlvdXIgbGljZW5zZSBpcyBiZWluZyB1c2VkIGVsc2V3aGVyZSBvbiB0aGUgbmV0d29yayBieSA8Yj4iKyhlLmFkZHJlc3N8fCJ1bmtub3duIGFkZHJlc3MiKSsnPC9iPi4gT25seSBvbmUgYWN0aXZlIGNvbXB1dGVyIGF0IHRoZSBzYW1lIHRpbWUgbWF5IHVzZSB0aGUgbGljZW5zZS48YnIvPjxici8+SWYgeW91IHdvdWxkIGxpa2UgdG8gcHVyY2hhc2UgYW4gYWRkaXRpb25hbCBsaWNlbnNlLCBwbGVhc2UgdmlzaXQgPGEgaHJlZj0iaHR0cDovL3dhbGxhYnlqcy5jb20vcHVyY2hhc2UiPm91ciB3ZWJzaXRlPC9hPi4gSWYgeW91IGhhdmUgYWxyZWFkeSBwdXJjaGFzZWQgdGhlIGxpY2Vuc2UsIHBsZWFzZSA8YSBocmVmPSIjIiBjbGFzcz0iJytFKyciPmFjdGl2YXRlIGl0PC9hPi4nO3RoaXMuX2VtaXROb3RpZmljYXRpb24oImVycm9yIix0KSx0aGlzLl9lbWl0U3RvcHBlZCgpfX0sInByb2plY3Q6c2NyZWVuIjp7dmFsdWU6ZnVuY3Rpb24oZSl7fX0sInByb2plY3Q6dGVzdFJlc3VsdHMiOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGk9T2JqZWN0LmNyZWF0ZShudWxsKSxuPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5fdGVzdFN0YXRzLnJlcG9ydE5vcm1hbFJ1bigpLHkoIkdldHRpbmcgZXhlY3V0ZWQgdGVzdHMiKSxfLmVhY2goZS50ZXN0cyxmdW5jdGlvbihuKXt2YXIgcz1uZXcgZChuKTtzLmluaXQobnVsbCxlLnRzLGZ1bmN0aW9uKGUpe2lbZS5pZCgpXT1lfSxmdW5jdGlvbihlKXtyZXR1cm4gZS5zZXRGaWxlKHQuX2ZpbGVzW2UuZmlsZUlkKCldKX0pfSkseSgiR2V0dGluZyBjb25zb2xlLmxvZyBvdXRwdXQiKSxfLmVhY2goZS5sb2csZnVuY3Rpb24oZSl7dmFyIG49bmV3IHYoZSkscz1uLnRlc3RJZCgpO2lmKDAhPT1zKXt2YXIgcj1pW3NdO3ImJnIuYWRkQ29uc29sZU1lc3NhZ2Uobil9dmFyIGE9bi5maWxlSWQoKTtpZihhKXt2YXIgbz10Ll9maWxlc1thXSxsPW4ucmFuZ2UoKTtvJiZsJiYoby5zZXRSYW5nZUNvbnNvbGVMb2cobi50ZXh0KCksbCksbi5zZXRGaWxlKG8pKX19KTt2YXIgcz1fLm1hcChlLmZpbGVzLGZ1bmN0aW9uKGUpe3JldHVybntjb3ZlcmFnZTplLGZpbGU6dC5fZmlsZXNbZS5pZF19fSkscj1fLmZpbHRlcihzLGZ1bmN0aW9uKGUpe3JldHVybiBlLmZpbGUuaXNUZXN0RmlsZSgpJiZlLmNvdmVyYWdlLmNoYW5nZWQmJiFlLmNvdmVyYWdlLnNpbmdsZVRlc3RDaGFuZ2VkfSk7eSgiUHJvY2Vzc2luZyBjb2RlIGNvdmVyYWdlIiksXy5lYWNoKHIsZnVuY3Rpb24oZSl7dmFyIGk9ZS5maWxlO3QuX3Rlc3RTdGF0cy50ZXN0c1JlbW92ZWQoaS5vd25UZXN0cygpKSxfLmVhY2goaS5yZW1vdmVBbGxUZXN0cygpLGZ1bmN0aW9uKGUpe25bZS5rZXkoKV09ZX0pfSksXy5lYWNoKGksZnVuY3Rpb24oZSl7Xy5lYWNoKHQuX2ZpbGVzW2UuZmlsZUlkKCldLmFkZFRlc3QoZSksZnVuY3Rpb24oZSl7bltlLmtleSgpXT1lfSksdC5fdGVzdFN0YXRzLnRlc3RBZGRlZChlKX0pLF8uZWFjaChzLGZ1bmN0aW9uKGUpe3QuX3VwZGF0ZUZpbGVSYW5nZXMoZSxpKSxuW2UuZmlsZS5rZXkoKV09ZS5maWxlfSksXy5lYWNoKGksZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29tcGxldGVJbml0aWFsaXphdGlvbih0Ll9maWxlcyl9KSx5KCJQcm9jZXNzaW5nIGdsb2JhbCB0ZXN0IGVycm9ycyIpO3ZhciBhPVtdO18uZWFjaChlLmdsb2JhbEVycm9ycyxmdW5jdGlvbihlKXt2YXIgaT1uZXcgZyhlKTtpLmluaXQoKSxfLmVhY2goaS5zdGFjaygpLGZ1bmN0aW9uKGUpe3ZhciBuPXQuX2ZpbGVzW2UuZmlsZUlkKCldO2lmKG4pe2Uuc2V0RmlsZShuKTt2YXIgcz1uLmNsb3Nlc3RSYW5nZShlLmxpbmUoKSk7bnVsbCE9cyYmKGUuc2V0UmFuZ2Uocykscy5mYWlscyhpKSl9fSksYS5wdXNoKGkpfSksdGhpcy5fdGVzdFN0YXRzLnJlcG9ydEdsb2JhbEVycm9ycyhhKSx5KCJVcGRhdGluZyBhZmZlY3RlZCBmaWxlcyIpLHRoaXMuX3VwZGF0ZU9wZW5lZERvY3VtZW50cyhuKX19LF91cGRhdGVPcGVuZWREb2N1bWVudHM6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsaT1PYmplY3QuY3JlYXRlKG51bGwpO18uZWFjaChlLGZ1bmN0aW9uKGUpe3ZhciBuPWUudXBkYXRlRG9jdW1lbnQoKTtuJiYoaVtlLnBhdGgoKV09dC5fYWx3YXlzU2VuZEFsbExpbmVzP2UuYWxsTGluZXMoKTpuKX0pLF8uaXNFbXB0eShpKXx8dGhpcy5fZW1pdERvY3VtZW50VXBkYXRlcyhpKSx0aGlzLl9lbWl0U3RhdHNVcGRhdGUodGhpcy5fdGVzdFN0YXRzLmZ1bGxSZXBvcnRJZkNoYW5nZWQoKSl9fSxfZmlsZUlkQnlQYXRoOnt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fZnMuaWRCeVBhdGgoZSl9fSxfdXBkYXRlRmlsZVJhbmdlczp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaT1bXSxuPWUuZmlsZSxzPWUuY292ZXJhZ2U7Xy5lYWNoKHMucmFuZ2VzLGZ1bmN0aW9uKGUpe3ZhciBzPW5ldyBmKGUpO3MuaW5pdChuLHQpLHMuc2V0Q29uc29sZUxvZyhuLnJhbmdlQ29uc29sZUxvZyhzKSksaS5wdXNoKHMpfSksbi5zZXRSYW5nZXMoaSxzLmNoYW5nZWQsZS5jb3ZlcmFnZS5zaW5nbGVUZXN0Q2hhbmdlZCksbi5jbGVhclJhbmdlQ29uc29sZUxvZygpfX0sX3VwZGF0ZVByb2plY3RGaWxlOnt2YWx1ZTpmdW5jdGlvbihlLHQsaSxuKXt2YXIgcz10aGlzLHI9dGhpcy5fZmlsZXNbdC5pZF07aWYocnx8ZXx8KHI9bmV3IGgodCksdGhpcy5fZmlsZXNbci5rZXkoKV09cix0aGlzLl9lbWl0RmlsZXNUb1RyYWNrKFt0LnBhdGhdKSksZSkhZnVuY3Rpb24oKXtkZWxldGUgcy5fZmlsZXNbdC5pZF07dmFyIGU9T2JqZWN0LmNyZWF0ZShudWxsKSxpPXIub3duVGVzdHMoKTtzLl90ZXN0U3RhdHMudGVzdHNSZW1vdmVkKGkpLF8uZWFjaChpLGZ1bmN0aW9uKHQpe3JldHVybiBfLmV4dGVuZChlLHQub2Jzb2xldGUoKSl9KSxkZWxldGUgZVt0LmlkXSxzLl91cGRhdGVPcGVuZWREb2N1bWVudHMoZSksci5kaXNwb3NlKCl9KCk7ZWxzZSBpZihyLmlzT3BlbmVkSW5FZGl0b3IoKSYmci5oYXNWYWxpZERvY3VtZW50KCkpe3ZhciBhPSEwO2lmKF8uaXNQYXRjaCh0LmNvbnRlbnQpJiZfLmlzU3RyaW5nKGkpJiZuKXt2YXIgbz10aGlzLl9kaWZmTWF0Y2hQYXRjaC5wYXRjaF9mcm9tVGV4dCh0LmNvbnRlbnQpO2lmKDE9PT1vLmxlbmd0aCl7dmFyIGw9b1swXTtsJiZsLmRpZmZzJiZsLmRpZmZzLmxlbmd0aCYmbC5zdGFydDE9PT1sLnN0YXJ0MiYmIWZ1bmN0aW9uKCl7YT0hMTt2YXIgZT1sLnN0YXJ0MSx0PWwuZGlmZnNbMF07MD09PXRbMF0mJihlKz10WzFdLmxlbmd0aCk7dmFyIHM9MDtpZihfLmVhY2gobC5kaWZmcyxmdW5jdGlvbihlKXswIT09ZVswXSYmKHMrPWVbMF0qKF8udGV4dExpbmVzKGVbMV0pLmxlbmd0aC0xKSl9KSxzKXt2YXIgbz1fLnRleHRMaW5lcyhpLGUpLmxlbmd0aCx1PV8udGV4dExpbmVzKGksbC5zdGFydDEpLmxlbmd0aCxjPU1hdGguYWJzKHMpLGg9TWF0aC5tYXgoTWF0aC5taW4obi5zdGFydCx1KS1jLDEpLGY9TWF0aC5tYXgobi5lbmQsdSk7ci5zaGlmdERvY3VtZW50TGluZXMobyxzLHtzdGFydDpoLGVuZDpmfSl9ZWxzZSBuLnN0YXJ0IT09bi5lbmQmJnIuaW52YWxpZGF0ZURvY3VtZW50TGluZXMoMCwwLG4pfSgpfX1hJiYoeSgiTmV3IGRvY3VtZW50IG9yIGNvbXBsZXggZG9jdW1lbnQgY2hhbmdlIiksci5pbnZhbGlkYXRlRG9jdW1lbnQoKSl9dGhpcy5fcHJvamVjdC5maWxlKHtmaWxlOnRoaXMuX2ZpbGVGb3JQcm9qZWN0KHQpLCJkZWxldGUiOmV9KX19LF9maWxlc0ZvclByb2plY3Q6e3ZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBfLm1hcChlLHRoaXMuX2ZpbGVGb3JQcm9qZWN0KX19LF9maWxlRm9yUHJvamVjdDp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJue3BhdGg6ZS5wYXRoLGlkOmUuaWQsdHM6ZS50cyxvcmRlcjplLm9yZGVyLGluY2x1ZGU6ZS5sb2FkLHRyaWdnZXJzVGVzdHM6ZS50cmlnZ2VyLGNvdmVyYWJsZTplLmluc3RydW1lbnQsdGVzdDplLnRlc3QsdHlwZTplLnR5cGUsYmluYXJ5OmUuYmluYXJ5LGNvbnRlbnQ6ZS5jb250ZW50fX19LF9zdGFydDp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztfLmVhY2goZS5maWxlcyxmdW5jdGlvbihlKXt2YXIgaT1uZXcgaChlKTt0Ll9maWxlc1tpLmtleSgpXT1pfSksdGhpcy5fZW1pdEZpbGVzVG9UcmFjayhfLm1hcChlLmZpbGVzLGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhdGh9KSksZS5saWNlbnNlfHwoZS5saWNlbnNlPXRoaXMuX3ZlcmlmaWNhdGlvblJlc3VsdCYmdGhpcy5fdmVyaWZpY2F0aW9uUmVzdWx0Lmhhc2h8fHRoaXMuX3Byb2plY3QuX3dhbGxhYnlFbWFpbCksdGhpcy5fcHJvamVjdC5zdGFydChlKX19LF92ZXJpZnlMaWNlbnNlOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX3ZlcmlmaWNhdGlvblJlc3VsdD10aGlzLl9saWNlbnNlVmVyaWZpY2F0aW9uUmVzdWx0KGUsdCl9fSxfcnVuSWZWZXJpZmllZDp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fdmVyaWZpY2F0aW9uUmVzdWx0PXRoaXMuX3ZlcmlmaWNhdGlvblJlc3VsdHx8e3ZhbGlkOiExfTt2YXIgdD12b2lkIDA7aWYodGhpcy5fdmVyaWZpY2F0aW9uUmVzdWx0LnZhbGlkKXJldHVybiB0aGlzLl92ZXJpZmljYXRpb25SZXN1bHQuZXhwaXJlZD8odD0nWW91ciBjdXJyZW50IHdhbGxhYnkuanMgbGljZW5zZSA8Yj5mcmVlIHVwZ3JhZGVzIHBlcmlvZCBoYXMgZXhwaXJlZDwvYj4uIElmIHlvdSB3b3VsZCBsaWtlIHRvIHdvcmsgd2l0aCB0aGUgbGF0ZXN0IHZlcnNpb24gb2Ygd2FsbGFieS5qcyBhbmQgZnV0dXJlIHZlcnNpb25zIHJlbGVhc2VkIHdpdGhpbiB0aGUgbmV4dCAxMiBtb250aHMsIHBsZWFzZSB2aXNpdCA8YSBocmVmPSJodHRwOi8vd2FsbGFieWpzLmNvbS9wdXJjaGFzZSI+b3VyIHdlYnNpdGU8L2E+IHRvIHVwZ3JhZGUgeW91ciBsaWNlbnNlLjxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbmV3IGxpY2Vuc2UsIHBsZWFzZSA8YSBocmVmPSIjIiBjbGFzcz0iJytFKyciPmFjdGl2YXRlIGl0PC9hPi4nLHRoaXMuX2VtaXRFeHBpcmVkTGljZW5zZSgpKTp0aGlzLl92ZXJpZmljYXRpb25SZXN1bHQuZXhwaXJpbmdTb29uJiYodD0iWW91ciBjdXJyZW50IHdhbGxhYnkuanMgbGljZW5zZSA8Yj5mcmVlIHVwZ3JhZGVzIHBlcmlvZCB3aWxsIGV4cGlyZSBzb29uIG9uICIrdGhpcy5fdmVyaWZpY2F0aW9uUmVzdWx0LmV4cGlyYXRpb25EYXRlKyc8L2I+LiBJZiB5b3Ugd291bGQgbGlrZSB0byB3b3JrIHdpdGggdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHdhbGxhYnkuanMgYW5kIGZ1dHVyZSB2ZXJzaW9ucyByZWxlYXNlZCB3aXRoaW4gdGhlIG5leHQgMTIgbW9udGhzLCBwbGVhc2UgdmlzaXQgPGEgaHJlZj0iaHR0cDovL3dhbGxhYnlqcy5jb20vcHVyY2hhc2UiPm91ciB3ZWJzaXRlPC9hPiB0byB1cGdyYWRlIHlvdXIgbGljZW5zZS48YnIvPjxici8+SWYgeW91IGhhdmUgYWxyZWFkeSBwdXJjaGFzZWQgdGhlIG5ldyBsaWNlbnNlLCBwbGVhc2UgPGEgaHJlZj0iIyIgY2xhc3M9IicrRSsnIj5hY3RpdmF0ZSBpdDwvYT4uJyksdCYmdGhpcy5fZW1pdE5vdGlmaWNhdGlvbigid2FybmluZyIsdCksZSgpO2lmKHRoaXMuX3ZlcmlmaWNhdGlvblJlc3VsdC5leHBpcmVkVHJpYWwpdD0nWW91ciB3YWxsYWJ5LmpzIHRyaWFsIHBlcmlvZCBpcyBvdmVyLCB0aGFua3MgZm9yIHRyeWluZyBpdCBvdXQuIFBsZWFzZSB2aXNpdCA8YSBocmVmPSJodHRwOi8vd2FsbGFieWpzLmNvbS9wdXJjaGFzZSI+b3VyIHdlYnNpdGU8L2E+IHRvIHB1cmNoYXNlIGEgbGljZW5zZSBvciB0byBhcnJhbmdlIGEgbG9uZ2VyIHRyaWFsIHBlcmlvZCBmb3IgeW91cnNlbGYgb3IgeW91ciB0ZWFtLjxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbGljZW5zZSwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK0UrJyI+YWN0aXZhdGUgaXQ8L2E+LicsdGhpcy5fZW1pdE5vdGlmaWNhdGlvbigiZXJyb3IiLHQpLHRoaXMuX2VtaXRTdG9wcGVkKCk7ZWxzZXtpZighdGhpcy5fdmVyaWZpY2F0aW9uUmVzdWx0LmludmFsaWRWZXJzaW9uKXJldHVybiB0PSdObyB2YWxpZCB3YWxsYWJ5LmpzIGxpY2Vuc2UgZm91bmQuIFdhbGxhYnkuanMgd2lsbCBzdGFydCBpbiB0cmlhbCBtb2RlLjxici8+PGJyLz5JZiB5b3Ugd291bGQgbGlrZSB0byBwdXJjaGFzZSBhIGxpY2Vuc2UsIHBsZWFzZSB2aXNpdCA8YSBocmVmPSJodHRwOi8vd2FsbGFieWpzLmNvbS9wdXJjaGFzZSI+b3VyIHdlYnNpdGU8L2E+Ljxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbGljZW5zZSwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK0UrJyI+YWN0aXZhdGUgaXQ8L2E+LicsdGhpcy5fZW1pdE5vdGlmaWNhdGlvbigid2FybmluZyIsdCksdGhpcy5fdHJpYWxNb2RlKCksZSgpO3Q9J0N1cnJlbnRseSBpbnN0YWxsZWQgdmVyc2lvbiBvZiB3YWxsYWJ5LmpzIGlzIDxiPm5vdCBjb3ZlcmVkIGJ5IHlvdXIgbGljZW5zZTwvYj4uIFBsZWFzZSB2aXNpdCA8YSBocmVmPSJodHRwOi8vd2FsbGFieWpzLmNvbS9wdXJjaGFzZSI+b3VyIHdlYnNpdGU8L2E+IHRvIHVwZ3JhZGUgeW91ciBsaWNlbnNlLjxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbGljZW5zZSwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK0UrJyI+YWN0aXZhdGUgaXQ8L2E+LicsdGhpcy5fZW1pdE5vdGlmaWNhdGlvbigiZXJyb3IiLHQpLHRoaXMuX2VtaXRTdG9wcGVkKCl9fX0sX3RyaWFsTW9kZTp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlPWV8fDAsbChmdW5jdGlvbigpe2U+PXc/KHQuX2VtaXROb3RpZmljYXRpb24oIndhcm5pbmciLCdXYWxsYWJ5LmpzIDxiPnRyaWFsIHNlc3Npb24gaXMgb3ZlcjwvYj4uIFRvIGtlZXAgdXNpbmcgd2FsbGFieS5qcywgcGxlYXNlIDxiPnJlc3RhcnQgeW91ciBlZGl0b3I8L2I+IG9yIHZpc2l0IDxhIGhyZWY9Imh0dHA6Ly93YWxsYWJ5anMuY29tL3B1cmNoYXNlIj5vdXIgd2Vic2l0ZTwvYT4gdG8gcHVyY2hhc2UgYSBsaWNlbnNlLjxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbGljZW5zZSwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK0UrJyI+YWN0aXZhdGUgaXQ8L2E+LicpLHQuc3RvcCgpLHQuX2VtaXRTdG9wcGVkKCEwKSk6KHQuX2NvbnRpbnVlVHJpYWxTZXNzaW9uPWZ1bmN0aW9uKCl7dSh0Ll9zdG9wcGVyVGltZW91dCksdC5fdHJpYWxNb2RlKGUrMSl9LHQuX3N0b3BwZXJUaW1lb3V0PWwoZnVuY3Rpb24oKXt0LnN0b3AoKSx0Ll9lbWl0U3RvcHBlZCgpfSxUKSx0Ll9lbWl0Tm90aWZpY2F0aW9uKCJ3YXJuaW5nIiwnV2FsbGFieS5qcyB3aWxsIHN0b3AgaW4gYSBmZXcgc2Vjb25kcy4gVG8gPGI+Y29udGludWUgd2FsbGFieS5qcyB0cmlhbCBzZXNzaW9uPC9iPiwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK1IrJyI+Y2xpY2sgaGVyZTwvYT4uPGJyLz48YnIvPlZpc2l0IDxhIGhyZWY9Imh0dHA6Ly93YWxsYWJ5anMuY29tL3B1cmNoYXNlIj5vdXIgd2Vic2l0ZTwvYT4gdG8gcHVyY2hhc2UgYSBsaWNlbnNlLjxici8+PGJyLz5JZiB5b3UgaGF2ZSBhbHJlYWR5IHB1cmNoYXNlZCB0aGUgbGljZW5zZSwgcGxlYXNlIDxhIGhyZWY9IiMiIGNsYXNzPSInK0UrJyI+YWN0aXZhdGUgaXQ8L2E+LicpKX0sYil9fSxfbGljZW5zZVZlcmlmaWNhdGlvblJlc3VsdDp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzLG49e3ZhbGlkOiExLGV4cGlyZWRUcmlhbDohMH0scz12b2lkIDA7dHJ5e3M9aS5fcmVhZEZpbGVTeW5jKHQpfWNhdGNoKHIpe3RyeXtpLl93cml0ZUZpbGVTeW5jKHQsK25ldyBEYXRlKX1jYXRjaChhKXt9fXRyeXtpZihfLmlzU3RyaW5nKHMpKWlmKHMubGVuZ3RoPjEwMClpZihNW3NdKW4uZXhwaXJlZFRyaWFsPSExO2Vsc2V7bi5leHBpcmVkVHJpYWw9ITEsbi5rZXk9czt2YXIgbD1tLnBhcnNlS2V5KHMpLHU9bC5saWNlbnNlZU5hbWUsYz1sLmxpY2Vuc2VlRW1haWwsaD1sLmxpY2Vuc2VUYWdzLGY9bC5saWNlbnNlZFByb2R1Y3QsZD1sLmV4cGlyYXRpb25EYXRlU3RyaW5nLHY9bC5saWNlbnNlU2lnbmF0dXJlO24ubmFtZT11LG4uZXhwaXJhdGlvbkRhdGU9ZDt2YXIgcD1vLmNyZWF0ZVZlcmlmeSgiUlNBLVNIQTUxMiIpO2lmKHAudXBkYXRlKG5ldyBCdWZmZXIodStoK2QpKSxuLnZhbGlkPXAudmVyaWZ5KElbfmYuaW5kZXhPZihqKT9qOmVdLG5ldyBCdWZmZXIodiwiYmFzZTY0IikpLG4udmFsaWQpe3ZhciBnPWQuc3BsaXQoIi8iKSx5PW5ldyBEYXRlKGdbMV0rIi8iK2dbMF0rIi8iK2dbMl0pO2lmKHk8bmV3IERhdGUoMTQ2NTk1NTQzNTMyMSkpbi5pbnZhbGlkVmVyc2lvbj0hMCxuLnZhbGlkPSExO2Vsc2V7dmFyIGI9Yz09PWkuX3Byb2plY3QuX3dhbGxhYnlFbWFpbDt0cnl7dmFyIFQ9dm9pZCAwO24uaGFzaD1iP2kuX3Byb2plY3QuX3dhbGxhYnlFbWFpbDooVD1vLmNyZWF0ZUhhc2goInNoYTUxMiIpLFQudXBkYXRlKG5ldyBCdWZmZXIocywiYmFzZTY0IikpLFQuZGlnZXN0KCJiYXNlNjQiKSl9Y2F0Y2godyl7bi5oYXNoPWkuX3Byb2plY3QuX3dhbGxhYnlFbWFpbH1pZih5PG5ldyBEYXRlKW4uZXhwaXJlZD0hMCxuLnZhbGlkPSFiLG4uZXhwaXJlZFRyaWFsPWI7ZWxzZXt2YXIgRT1uZXcgRGF0ZTtFLnNldERhdGUoRS5nZXREYXRlKCkrMTQpLG4uZXhwaXJpbmdTb29uPUU+eX19fX1lbHNle3ZhciBSPXBhcnNlSW50KHMsMTApO24uZXhwaXJlZFRyaWFsPV8uaXNOYU4oUil8fFIrMjYyOGU2PCtuZXcgRGF0ZX1lbHNlIG4uZXhwaXJlZFRyaWFsPSExfWNhdGNoKHcpe24udmFsaWQ9ITF9cmV0dXJuIG59fSxfZW1pdEZpbGVzVG9UcmFjazp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fZW1pdCh7dHlwZToiZmlsZXNUb1RyYWNrIixmaWxlczplfSl9fSxfZW1pdFRlc3RSdW5FcnJvcjp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fZW1pdCh7dHlwZToic3RhdHMiLGRhdGE6ZX0pfX0sX2VtaXREb2N1bWVudFVwZGF0ZXM6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2VtaXQoe3R5cGU6ImRvY3VtZW50VXBkYXRlcyIsdXBkYXRlczplfSl9fSxfZW1pdFN0YXRzVXBkYXRlOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9lbWl0KHt0eXBlOiJzdGF0cyIsZGF0YTplfSl9fSxfZW1pdFByb2plY3RDb25maWd1cmVkOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX2VtaXQoXy5leHRlbmQodCx7ZmlsZXM6ZX0pKX19LF9lbWl0Tm90aWZpY2F0aW9uOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX2VtaXQoe3R5cGU6Im5vdGlmaWNhdGlvbiIsbm90aWZpY2F0aW9uOnt0ZXh0OnQsdHlwZTplfX0pfX0sX2VtaXRTdG9wcGVkOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9lbWl0KHt0eXBlOiJzdG9wcGVkIixkZWFjdGl2YXRlOmV9KX19LF9lbWl0RXhwaXJlZExpY2Vuc2U6e3ZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fZW1pdCh7dHlwZToiZXhwaXJlZExpY2Vuc2UifSl9fSxfZW1pdDp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5lbWl0KCJtZXNzYWdlIixlKX19LF9lcnJvck1lc3NhZ2U6e3ZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlJiYoZS5zdGFja3x8ZS5tZXNzYWdlKX19LF90ZXN0UnVuRXJyb3JNZXNzYWdlOnt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5tZXNzYWdlfX19KSxpfShFdmVudEVtaXR0ZXIpO3QuZXhwb3J0cz1rfSx7Ii4vc2VydmVyL2NvbnNvbGVNZXNzYWdlIjozLCIuL3NlcnZlci9jb3ZlcmFibGVSYW5nZSI6NCwiLi9zZXJ2ZXIvZXJyb3JFbnRyeSI6NywiLi9zZXJ2ZXIvZXhlY3V0ZWRUZXN0Ijo4LCIuL3NlcnZlci9maWxlU3lzdGVtIjo5LCIuL3NlcnZlci9zdGFja0VudHJ5IjoxMSwiLi9zZXJ2ZXIvc3RhdHMiOjEyLCIuL3NlcnZlci90cmFja2VkU291cmNlRmlsZSI6MTMsIi4vc2hhcmVkL3V0aWxzIjoxNSxjcnlwdG86dm9pZCAwLGRlYnVnOnZvaWQgMCx0aW1lcnM6dm9pZCAwfV0sMzpbZnVuY3Rpb24oZSx0LGkpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGkgaW4gdCl7dmFyIG49dFtpXTtuLmNvbmZpZ3VyYWJsZT0hMCxuLnZhbHVlJiYobi53cml0YWJsZT0hMCl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSx0KX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKSxzPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9LHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ModGhpcyxlKSx0aGlzLl90ZXN0SWQ9dC5zcGVjLHRoaXMuX2ZpbGVJZD10LmZpbGUsdGhpcy5fcmFuZ2U9dC5yYW5nZSx0aGlzLl90ZXh0PXQudGV4dCx0aGlzLl90eXBlPXQudHlwZX1yZXR1cm4gbihlLHt0ZXN0SWQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Rlc3RJZH19LGZpbGVJZDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZmlsZUlkfX0scmFuZ2U6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JhbmdlfX0sc2V0UmFuZ2U6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX3JhbmdlPWV9fSx0ZXh0Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0fX0sdHlwZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdHlwZX19LHNldEZpbGU6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2ZpbGU9ZX19LGZpbGU6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZpbGV9fSxsaW5lOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yYW5nZT9fLmlzQXJyYXkodGhpcy5fcmFuZ2UpP3RoaXMuX3JhbmdlWzBdOnRoaXMuX3JhbmdlLnN0YXJ0TGluZSgpOnZvaWQgMH19fSksZX0oKTt0LmV4cG9ydHM9cn0se31dLDQ6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtzKHRoaXMsZSksdGhpcy5faXRlbXM9dC5pdGVtcyx0aGlzLl9oaXRzPXQuaGl0c31yZXR1cm4gbihlLHtpbml0Ont2YWx1ZTpmdW5jdGlvbih0LGkpe3ZhciBuPXRoaXM7dGhpcy5fa2V5PWUucmFuZ2VLZXkodGhpcy5faXRlbXMpLHRoaXMuX2ZpbGU9dCx0aGlzLl9zdGFydExpbmU9dGhpcy5faXRlbXNbMF0sdGhpcy5fc3RhcnRDb2x1bW49dGhpcy5faXRlbXNbMV0sdGhpcy5fZW5kTGluZT10aGlzLl9pdGVtc1syXSx0aGlzLl9lbmRDb2x1bW49dGhpcy5faXRlbXNbM10sdGhpcy5faGl0cyYmKHRoaXMuX2NvdmVyaW5nVGVzdE1hcD1PYmplY3QuY3JlYXRlKG51bGwpLF8uZWFjaCh0aGlzLl9oaXRzLGZ1bmN0aW9uKGUpe2lmKGUpe3ZhciB0PWlbZV07aWYoIXQpcmV0dXJuO24uX2NvdmVyaW5nVGVzdE1hcFt0LmtleSgpXT10LHQubWF5YmVDb3ZlcnMobiksbi5fYWRkRmFpbGVkT25NZVRlc3RJZkZhaWxpbmcodCl9ZWxzZSBuLl9pc0NvdmVyZWRCeU5vdFRlc3RzPSEwfSkpLGRlbGV0ZSB0aGlzLl9pdGVtcyxkZWxldGUgdGhpcy5faGl0c319LGxpbmVTaGlmdDp7dmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5fc3RhcnRMaW5lKz10LHRoaXMuX2VuZExpbmUrPXQsdGhpcy5fa2V5PWUucmFuZ2VLZXkoW3RoaXMuX3N0YXJ0TGluZSx0aGlzLl9zdGFydENvbHVtbix0aGlzLl9lbmRMaW5lLHRoaXMuX2VuZENvbHVtbl0pfX0sc3RhcnRMaW5lOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydExpbmV9fSxzdGFydENvbHVtbjp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRDb2x1bW59fSxlbmRMaW5lOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmRMaW5lfX0sZW5kQ29sdW1uOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmRDb2x1bW59fSxmYWlsczp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fZ2xvYmFsRXJyb3JzfHwodGhpcy5fZ2xvYmFsRXJyb3JzPVtdKSx+dGhpcy5fZ2xvYmFsRXJyb3JzLmluZGV4T2YoZSl8fHRoaXMuX2dsb2JhbEVycm9ycy5wdXNoKGUpfX0sc2V0Q29uc29sZUxvZzp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fY29uc29sZUxvZz1lfX0sY29uc29sZUxvZzp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29uc29sZUxvZ319LGtleTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa2V5fX0saXNEaXNwb3NlZDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNEaXNwb3NlZH19LGlzRXJyb3JTb3VyY2U6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZhaWxlZEJ5TWVUZXN0cyYmIV8uaXNFbXB0eSh0aGlzLl9mYWlsZWRCeU1lVGVzdHMpfHx0aGlzLl9nbG9iYWxFcnJvcnMmJiFfLmlzRW1wdHkodGhpcy5fZ2xvYmFsRXJyb3JzKX19LGlzT25FcnJvclBhdGg6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZhaWxlZE9uTWVUZXN0cyYmIV8uaXNFbXB0eSh0aGlzLl9mYWlsZWRPbk1lVGVzdHMpfX0sZXJyb3JzOnt2YWx1ZTpmdW5jdGlvbiB0KCl7dmFyIHQ9W107cmV0dXJuIHRoaXMuaXNFcnJvclNvdXJjZSgpPyh0aGlzLl9mYWlsZWRCeU1lVGVzdHMmJih0PXQuY29uY2F0KF8uZmxhdHRlbihfLnZhbHVlcyh0aGlzLl9mYWlsZWRCeU1lVGVzdHMpKSkpLHRoaXMuX2dsb2JhbEVycm9ycyYmKHQ9dC5jb25jYXQodGhpcy5fZ2xvYmFsRXJyb3JzKSksdCk6dH19LGRpc3Bvc2U6e3ZhbHVlOmZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuX2ZpbGUsZGVsZXRlIHRoaXMuX2NvdmVyaW5nVGVzdE1hcCxkZWxldGUgdGhpcy5fZmFpbGVkT25NZVRlc3RzLGRlbGV0ZSB0aGlzLl9mYWlsZWRCeU1lVGVzdHMsZGVsZXRlIHRoaXMuX2dsb2JhbEVycm9ycyx0aGlzLl9pc0Rpc3Bvc2VkPSEwfX0sc291cmNlRmlsZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZmlsZX19LGZhaWxzVGVzdDp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9mYWlsZWRCeU1lVGVzdHN8fCh0aGlzLl9mYWlsZWRCeU1lVGVzdHM9T2JqZWN0LmNyZWF0ZShudWxsKSksdGhpcy5fZmFpbGVkQnlNZVRlc3RzW2Uua2V5KCldPXR9fSxub3RDb3ZlcmVkQnk6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5KCk7dGhpcy5fY292ZXJpbmdUZXN0TWFwJiZkZWxldGUgdGhpcy5fY292ZXJpbmdUZXN0TWFwW3RdLHRoaXMuX2ZhaWxlZEJ5TWVUZXN0cyYmZGVsZXRlIHRoaXMuX2ZhaWxlZEJ5TWVUZXN0c1t0XSx0aGlzLl9mYWlsZWRPbk1lVGVzdHMmJmRlbGV0ZSB0aGlzLl9mYWlsZWRPbk1lVGVzdHNbdF0sbnVsbCE9dGhpcy5fZmlsZSYmdGhpcy5fZmlsZS5yYW5nZUNvdmVyYWdlQ2hhbmdlZCh0aGlzKX19LGNvdmVyaW5nVGVzdHM6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIF8udmFsdWVzKHRoaXMuX2NvdmVyaW5nVGVzdE1hcCl9fSxpc0NvdmVyZWQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzQ292ZXJlZEJ5Tm90VGVzdHN8fCFfLmlzRW1wdHkodGhpcy5fY292ZXJpbmdUZXN0TWFwKX19LGF0dGFjaGVkVG9Tb3VyY2VGaWxlOnt2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fY292ZXJpbmdUZXN0TWFwJiZfLmVhY2godGhpcy5fY292ZXJpbmdUZXN0TWFwLGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvdmVycyhlKX0pfX0sdXBkYXRlRnJvbTp7dmFsdWU6ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPXRoaXM7dCYmaSYmXy5pc0VtcHR5KGUuX2NvdmVyaW5nVGVzdE1hcCl8fCh0aGlzLl9pc0NvdmVyZWRCeU5vdFRlc3RzPWUuX2lzQ292ZXJlZEJ5Tm90VGVzdHMsdGhpcy5fY29uc29sZUxvZz1lLl9jb25zb2xlTG9nLHRoaXMuX2ZhaWxlZEJ5TWVUZXN0cyYmKHRoaXMuX2ZhaWxlZEJ5TWVUZXN0cz1PYmplY3QuY3JlYXRlKG51bGwpKSx0aGlzLl9nbG9iYWxFcnJvcnMmJih0aGlzLl9nbG9iYWxFcnJvcnM9W10pLGUuX2NvdmVyaW5nVGVzdE1hcD90JiYhaT8odGhpcy5fY292ZXJpbmdUZXN0TWFwPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZmFpbGVkT25NZVRlc3RzJiYodGhpcy5fZmFpbGVkT25NZVRlc3RzPU9iamVjdC5jcmVhdGUobnVsbCkpLF8uZWFjaChlLl9jb3ZlcmluZ1Rlc3RNYXAsZnVuY3Rpb24oZSl7bi5fY292ZXJpbmdUZXN0TWFwW2Uua2V5KCldPWUsZS5jb3ZlcnMobiksbi5fYWRkRmFpbGVkT25NZVRlc3RJZkZhaWxpbmcoZSl9KSk6Xy5lYWNoKGUuY292ZXJpbmdUZXN0cygpLGZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5KCk7bi5fZmFpbGVkT25NZVRlc3RzJiZkZWxldGUgbi5fZmFpbGVkT25NZVRlc3RzW3RdLG4uX2NvdmVyaW5nVGVzdE1hcFt0XT1lLGUuY292ZXJzKG4pLG4uX2FkZEZhaWxlZE9uTWVUZXN0SWZGYWlsaW5nKGUpfSk6KHRoaXMuX2NvdmVyaW5nVGVzdE1hcD1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2ZhaWxlZE9uTWVUZXN0cyYmKHRoaXMuX2ZhaWxlZE9uTWVUZXN0cz1PYmplY3QuY3JlYXRlKG51bGwpKSkpfX0saXNJbnNpZGVPZjp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3N0YXJ0TGluZT49ZS5fc3RhcnRMaW5lJiZlLl9lbmRMaW5lPj10aGlzLl9lbmRMaW5lJiYodGhpcy5fc3RhcnRMaW5lPmUuX3N0YXJ0TGluZXx8dGhpcy5fc3RhcnRDb2x1bW4+PWUuX3N0YXJ0Q29sdW1uKSYmKGUuX2VuZExpbmU+dGhpcy5fZW5kTGluZXx8ZS5fZW5kQ29sdW1uPj10aGlzLl9lbmRDb2x1bW4pfX0sX2FkZEZhaWxlZE9uTWVUZXN0SWZGYWlsaW5nOnt2YWx1ZTpmdW5jdGlvbihlKXtlLmlzRmFpbGluZygpJiYodGhpcy5fZmFpbGVkT25NZVRlc3RzfHwodGhpcy5fZmFpbGVkT25NZVRlc3RzPU9iamVjdC5jcmVhdGUobnVsbCkpLHRoaXMuX2ZhaWxlZE9uTWVUZXN0c1tlLmtleSgpXT1lKX19fSx7cmFuZ2VLZXk6e3ZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLmpvaW4oIi4iKX19fSksZX0oKTt0LmV4cG9ydHM9cn0se31dLDU6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWUoIi4vZG9jdW1lbnRMaW5lIiksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtzKHRoaXMsZSksdGhpcy5fbGluZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9yZWN5Y2xlZExpbmVzPVtdLHRoaXMuX2xpbmVTaGlmdE9ySW52YWxpZGF0aW9uU2luY2VMYXN0VXBkYXRlPSExfXJldHVybiBuKGUse3VwZGF0ZTp7dmFsdWU6ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPXRoaXMscz10aGlzLl9saW5lU2hpZnRPckludmFsaWRhdGlvblNpbmNlTGFzdFVwZGF0ZTtkZWxldGUgdGhpcy5fbGluZVNoaWZ0T3JJbnZhbGlkYXRpb25TaW5jZUxhc3RVcGRhdGUsaT8odGhpcy5fbGluZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9yZWN5Y2xlZExpbmVzPVtdKTp0JiZfLmVhY2godGhpcy5fbGluZXMsZnVuY3Rpb24oZSl7ZS5yZW1vdmVSYW5nZXMoKX0pO3ZhciBhPVtdLG89W107Xy5lYWNoKGUsZnVuY3Rpb24oZSl7aWYoIWUuaXNEaXNwb3NlZCgpKXt2YXIgaT1lLnN0YXJ0TGluZSgpLHM9bi5fbGluZXNbaV07c3x8KHM9bmV3IHIoaSksbi5fbGluZXNbaV09cyxvLnB1c2gocykpLHMuYWRkUmFuZ2UoZSx0KSxhLnB1c2gocyl9fSk7dmFyIGw9T2JqZWN0LmNyZWF0ZShudWxsKTthPXQmJiFpP18udmFsdWVzKHRoaXMuX2xpbmVzKS5jb25jYXQobyk6YSxfLmVhY2goYSxmdW5jdGlvbihlKXtlLmhhc1JhbmdlcygpP2UudXBkYXRlTGluZURhdGEoKSYmKGxbZS5rZXkoKV09ZSk6KGUuZGlzcG9zZSgpLGRlbGV0ZSBuLl9saW5lc1tlLm51bWJlcigpXSxuLl9yZWN5Y2xlZExpbmVzLnB1c2goZSkpfSk7dmFyIHU9dGhpcy5fcmVjeWNsZWRMaW5lcy5zbGljZSgpO3JldHVybiB0aGlzLl9yZWN5Y2xlZExpbmVzPVtdLHtsaW5lczppP18ubWFwKHRoaXMuX2xpbmVzLGZ1bmN0aW9uKGUpe3JldHVybiBuLl9jb21wYWN0TGluZShlKX0pOl8ubWFwKHM/dGhpcy5fbGluZXM6bCxmdW5jdGlvbihlKXt2YXIgdD1uLl9jb21wYWN0TGluZShlKTtyZXR1cm4gdC5jaGFuZ2VkPXM/ISFsW2Uua2V5KCldfHx2b2lkIDA6MSx0fSkuY29uY2F0KF8ubWFwKHUsZnVuY3Rpb24oZSl7cmV0dXJue2lkOmUua2V5KCksZGVsOjF9fSkpLGFsbExpbmVzOml8fHN9fX0sbGluZTp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2xpbmVzW2VdfX0sYWxsTGluZXM6e3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm57bGluZXM6Xy5tYXAodGhpcy5fbGluZXMsZnVuY3Rpb24odCl7cmV0dXJuIGUuX2NvbXBhY3RMaW5lKHQpfSksYWxsTGluZXM6ITB9fX0sX2NvbXBhY3RMaW5lOnt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm57aWQ6ZS5rZXkoKSxudW06ZS5udW1iZXIoKSxzdGF0ZTplLnN0YXRlKCksbG9nOmUuY29uc29sZUxvZ1RleHQoKSxlcnI6ZS5lcnJvclNvdXJjZVRleHQoKX19fSxpbnZhbGlkYXRlTGluZXM6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fbGluZVNoaWZ0T3JJbnZhbGlkYXRpb25TaW5jZUxhc3RVcGRhdGU9ITAsXy5lYWNoKF8ucmFuZ2UoZS5zdGFydCxlLmVuZCksZnVuY3Rpb24oaSl7dmFyIG49dC5fbGluZXNbaV07biYmdC5fcmVjeWNsZUxpbmVJZkluQ2hhbmdlRnJhbWUobixlKX0pfX0sc2hpZnRMaW5lczp7dmFsdWU6ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPXRoaXM7dGhpcy5fbGluZVNoaWZ0T3JJbnZhbGlkYXRpb25TaW5jZUxhc3RVcGRhdGU9ITA7dmFyIHM9Xy52YWx1ZXModGhpcy5fbGluZXMpO3RoaXMuX2xpbmVzPU9iamVjdC5jcmVhdGUobnVsbCksXy5lYWNoKHMsZnVuY3Rpb24ocyl7dmFyIHI9cy5udW1iZXIoKTtpZighbi5fcmVjeWNsZUxpbmVJZkluQ2hhbmdlRnJhbWUocyxpKSl7cj5lJiYocis9dCxzLm51bWJlcihyKSk7dmFyIGE9bi5fbGluZXNbcl07YT8oYS5kaXNwb3NlKCkscy5kaXNwb3NlKCksbi5fcmVjeWNsZWRMaW5lcy5wdXNoKGEpLG4uX3JlY3ljbGVkTGluZXMucHVzaChzKSxkZWxldGUgbi5fbGluZXNbcl0pOm4uX2xpbmVzW3JdPXN9fSl9fSxfcmVjeWNsZUxpbmVJZkluQ2hhbmdlRnJhbWU6e3ZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ZS5udW1iZXIoKTtyZXR1cm4gaT49dC5zdGFydCYmaTw9dC5lbmQ/KGUuZGlzcG9zZSgpLHRoaXMuX3JlY3ljbGVkTGluZXMucHVzaChlKSwhMCk6dm9pZCAwfX19KSxlfSgpO3QuZXhwb3J0cz1hfSx7Ii4vZG9jdW1lbnRMaW5lIjo2fV0sNjpbZnVuY3Rpb24oZSx0LGkpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGkgaW4gdCl7dmFyIG49dFtpXTtuLmNvbmZpZ3VyYWJsZT0hMCxuLnZhbHVlJiYobi53cml0YWJsZT0hMCl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSx0KX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKSxzPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9LHI9ZSgiLi4vc2hhcmVkL2VudW1zIikubGluZVN0YXRlLGE9MTI4LG89MTI4LGw9MCx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtzKHRoaXMsZSksdGhpcy5fbGluZU51bWJlcj10LHRoaXMuX3Jhbmdlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2lkPSsrbH1yZXR1cm4gbihlLHtoYXNSYW5nZXM6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIV8uaXNFbXB0eSh0aGlzLl9yYW5nZXMpfX0scmFuZ2VzOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yYW5nZXN9fSx1cGRhdGVMaW5lRGF0YTp7dmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ITAsaT0hMCxuPSExLHM9ITEsbD10aGlzLl9saW5lU3RhdGUsdT10aGlzLl9jb25zb2xlTG9nVGV4dCxjPXRoaXMuX2Vycm9yU291cmNlVGV4dDtyZXR1cm4gZGVsZXRlIHRoaXMuX2NvbnNvbGVMb2dUZXh0LGRlbGV0ZSB0aGlzLl9lcnJvclNvdXJjZVRleHQsXy5lYWNoKHRoaXMuX3JhbmdlcyxmdW5jdGlvbihyKXt2YXIgbD1yLmNvbnNvbGVMb2coKTtpZihsJiYoZS5fY29uc29sZUxvZ1RleHQ9ZS5faW5saW5lTWVzc2FnZShsLGEpKSxyLmlzRXJyb3JTb3VyY2UoKSl7bj0hMDt2YXIgdT1yLmVycm9ycygpO2lmKHUubGVuZ3RoKXt2YXIgYz11WzBdLm1lc3NhZ2UoKTtlLl9lcnJvclNvdXJjZVRleHQ9ZS5faW5saW5lTWVzc2FnZShjfHwiIixvKX19ci5pc09uRXJyb3JQYXRoKCkmJihzPSEwKSxyLmlzQ292ZXJlZCgpP2k9ITE6dD0hMX0pLHRoaXMuX2xpbmVTdGF0ZT1uP3IuZXJyb3JTb3VyY2U6cz9yLmVycm9yUGF0aDppP3Iubm90Q292ZXJlZDp0P3IuZnVsbHlDb3ZlcmVkOnIucGFydGlhbGx5Q292ZXJlZCx0aGlzLl9saW5lU3RhdGUhPT1sfHx0aGlzLl9jb25zb2xlTG9nVGV4dCE9PXV8fHRoaXMuX2Vycm9yU291cmNlVGV4dCE9PWN9fSxjb25zb2xlTG9nVGV4dDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29uc29sZUxvZ1RleHR9fSxlcnJvclNvdXJjZVRleHQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Vycm9yU291cmNlVGV4dH19LHN0YXRlOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9saW5lU3RhdGV9fSxhZGRSYW5nZTp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmtleSgpO3R8fGRlbGV0ZSB0aGlzLl9yYW5nZXNbaV0sdGhpcy5fcmFuZ2VzW2ldPWV9fSxyZW1vdmVSYW5nZXM6e3ZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fcmFuZ2VzPU9iamVjdC5jcmVhdGUobnVsbCl9fSxudW1iZXI6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsaT10aGlzLG49dGhpcy5fbGluZU51bWJlcjtyZXR1cm4gXy5pc1VuZGVmaW5lZChlKT9uOnZvaWQoZSE9PW4mJiFmdW5jdGlvbigpe3QuX2xpbmVOdW1iZXI9ZTt2YXIgcz1lLW4scj1fLnZhbHVlcyh0Ll9yYW5nZXMpO3QucmVtb3ZlUmFuZ2VzKCksXy5lYWNoKHIsZnVuY3Rpb24oZSl7ZS5saW5lU2hpZnQocyksaS5fcmFuZ2VzW2Uua2V5KCldPWV9KX0oKSl9fSxkaXNwb3NlOnt2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVtb3ZlUmFuZ2VzKCksZGVsZXRlIHRoaXMuX2NvbnNvbGVMb2dUZXh0LGRlbGV0ZSB0aGlzLl9lcnJvclNvdXJjZVRleHQsZGVsZXRlIHRoaXMuX2xpbmVTdGF0ZSx0aGlzLl9pc0Rpc3Bvc2VkPSEwfX0saXNEaXNwb3NlZDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNEaXNwb3NlZH19LGtleTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faWR9fSxfaW5saW5lTWVzc2FnZTp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmxlbmd0aD50PyIuLi4iOiIiO3JldHVybiBlLnN1YnN0cigwLHQpLnJlcGxhY2UoL1xyXG5ccyovZywiICIpLnJlcGxhY2UoL1xuXHMqL2csIiAiKStpfX19KSxlfSgpO3QuZXhwb3J0cz11fSx7Ii4uL3NoYXJlZC9lbnVtcyI6MTR9XSw3OltmdW5jdGlvbihlLHQsaSl7InVzZSBzdHJpY3QiO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaSBpbiB0KXt2YXIgbj10W2ldO24uY29uZmlndXJhYmxlPSEwLG4udmFsdWUmJihuLndyaXRhYmxlPSEwKX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLHQpfXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpLHM9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0scj1lKCIuL3N0YWNrRW50cnkiKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtzKHRoaXMsZSksdGhpcy5fYWN0dWFsPXQuYWN0dWFsLHRoaXMuX2V4cGVjdGVkPXQuZXhwZWN0ZWQsdGhpcy5fbWVzc2FnZT10Lm1lc3NhZ2UsdGhpcy5fc3RhY2s9dC5zdGFja31yZXR1cm4gbihlLHtpbml0Ont2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl9zdGFjazt0aGlzLl9zdGFjaz1bXSxfLmVhY2godCxmdW5jdGlvbih0KXtyZXR1cm4gZS5fc3RhY2sucHVzaChuZXcgcih0WzBdLHRbMV0pKX0pfX0sc3RhY2s6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YWNrfX0sbWVzc2FnZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWVzc2FnZX19LGFjdHVhbDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWN0dWFsfX0sZXhwZWN0ZWQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V4cGVjdGVkfX0sa2V5Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybih0aGlzLl9tZXNzYWdlfHwiIikrXy5yZWR1Y2UodGhpcy5fc3RhY2ssZnVuY3Rpb24oZSx0KXtyZXR1cm4gZSs9dC5rZXkoKTsKfSwiIil9fX0pLGV9KCk7dC5leHBvcnRzPWF9LHsiLi9zdGFja0VudHJ5IjoxMX1dLDg6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWUoIi4vZXJyb3JFbnRyeSIpLGE9KGUoIi4vc3RhY2tFbnRyeSIpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtzKHRoaXMsZSksdGhpcy5faWQ9dC5pZCx0aGlzLl9maWxlSWQ9dC5maWxlSWQsdGhpcy5fbG9nPXQubG9nLHRoaXMuX25hbWU9dC5uYW1lLHRoaXMuX3Rlc3RzPXQudGVzdHMsdGhpcy5fc3RhcnQ9dC5zdGFydCx0aGlzLl90aW1lPXQudGltZX1yZXR1cm4gbihlLHtpbml0Ont2YWx1ZTpmdW5jdGlvbih0LGksbixzKXt2YXIgYT10aGlzO2lmKHRoaXMuX3BhcmVudD10LHRoaXMuX2lkJiYodGhpcy5fYnVpbGRGdWxsTmFtZUFuZFBhdGgoKSxuKHRoaXMpLHRoaXMuX21heWJlQ292ZXJlZFJhbmdlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2NvdmVyZWRSYW5nZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl90cz1pLHRoaXMuX2xvZyYmdGhpcy5fbG9nLmxlbmd0aCkpe3RoaXMuX2lzRmFpbGluZz0hMDt2YXIgbz10aGlzLl9sb2c7dGhpcy5fbG9nPVtdLHRoaXMuX2Vycm9yU3RhY2tNYXA9T2JqZWN0LmNyZWF0ZShudWxsKSxfLmVhY2gobyxmdW5jdGlvbihlKXt2YXIgdD1uZXcgcihlKTt0LmluaXQoKSxfLmVhY2godC5zdGFjaygpLGZ1bmN0aW9uKGUpe3ZhciBpPWUua2V5KCksbj1hLl9lcnJvclN0YWNrTWFwW2ldO24/fl8uaW5kZXhPZihuLHQpfHxuLnB1c2godCk6KG49W10sbi5wdXNoKHQpLGEuX2Vycm9yU3RhY2tNYXBbaV09biksbi5zdGFja0VudHJ5PWUscyhlKX0pLGEuX2xvZy5wdXNoKHQpfSl9dGhpcy5fdGVzdHMmJihfLmVhY2godGhpcy5fdGVzdHMsZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBlKHQpLmluaXQoYSxpLG4scyl9KSxkZWxldGUgdGhpcy5fdGVzdHMpfX0saWQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lkfX0sa2V5Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9maWxlSWQrIl8iK3RoaXMuX2Z1bGxOYW1lfX0sZmlsZUlkOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9maWxlSWR9fSxmaWxlUGF0aDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGVzdEZpbGUmJnRoaXMuX3Rlc3RGaWxlLnBhdGgoKX19LHRpbWU6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpbWV9fSxlcnJvcnM6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xvZ319LGFkZENvbnNvbGVNZXNzYWdlOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9jb25zb2xlTWVzc2FnZXN8fCh0aGlzLl9jb25zb2xlTWVzc2FnZXM9W10pLHRoaXMuX2NvbnNvbGVNZXNzYWdlcy5wdXNoKGUpfX0sY29uc29sZU1lc3NhZ2VzOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb25zb2xlTWVzc2FnZXN9fSxpc0ZhaWxpbmc6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzRmFpbGluZ319LG1heWJlQ292ZXJzOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9tYXliZUNvdmVyZWRSYW5nZXNbZS5rZXkoKV09ZX19LHNldFRlc3RGaWxlOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl90ZXN0RmlsZT1lfX0sb2Jzb2xldGU6e3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGRlbGV0ZSB0aGlzLl9zdGFydFJhbmdlLGRlbGV0ZSB0aGlzLl90ZXN0RmlsZSx0aGlzLl9jb3ZlcmVkUmFuZ2VzJiYoXy5lYWNoKHRoaXMuX2NvdmVyZWRSYW5nZXMsZnVuY3Rpb24oaSl7aWYoaS5ub3RDb3ZlcmVkQnkoZSksIWkuaXNEaXNwb3NlZCgpKXt2YXIgbj1pLnNvdXJjZUZpbGUoKTt0W24ua2V5KCldPW59fSksZGVsZXRlIHRoaXMuX2NvdmVyZWRSYW5nZXMpLGRlbGV0ZSB0aGlzLl9lcnJvclN0YWNrTWFwLGRlbGV0ZSB0aGlzLl9jb25zb2xlTWVzc2FnZXMsdH19LGNvdmVyczp7dmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fY292ZXJlZFJhbmdlc1tlLmtleSgpXT1lfX0sc3RhcnRSYW5nZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRSYW5nZX19LGNvbXBsZXRlSW5pdGlhbGl6YXRpb246e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZGVsZXRlIHRoaXMuX21heWJlQ292ZXJlZFJhbmdlcyx0aGlzLl9lcnJvclN0YWNrTWFwJiZfLmVhY2godGhpcy5fZXJyb3JTdGFja01hcCxmdW5jdGlvbihpKXt2YXIgbj1pLnN0YWNrRW50cnk7aWYobil7dmFyIHM9ZVtuLmZpbGVJZCgpXTtpZihzKXt2YXIgcj1zLmNsb3Nlc3RSYW5nZShuLmxpbmUoKSk7ciYmKG4uc2V0UmFuZ2Uociksci5mYWlsc1Rlc3QodCxpKSl9fX0pLHRoaXMuX2NvbnNvbGVNZXNzYWdlcyYmXy5lYWNoKHRoaXMuX2NvbnNvbGVNZXNzYWdlcyxmdW5jdGlvbihlKXt2YXIgdD1lLmZpbGUoKTt0JiZlLnNldFJhbmdlKHQuY2xvc2VzdFJhbmdlKGUubGluZSgpKSl9KSx0aGlzLl9jb3ZlcmVkUmFuZ2VzJiYoXy5pc1VuZGVmaW5lZCh0aGlzLl9zdGFydCl8fCh0aGlzLl9zdGFydFJhbmdlPXRoaXMuX3Rlc3RGaWxlLmNsb3Nlc3RSYW5nZSh0aGlzLl9zdGFydCksZGVsZXRlIHRoaXMuX3N0YXJ0KSx0aGlzLl9zdGFydFJhbmdlfHxfLmVhY2godGhpcy5fY292ZXJlZFJhbmdlcyxmdW5jdGlvbihlKXt2YXIgaT1lLnNvdXJjZUZpbGUoKTtpPT10Ll90ZXN0RmlsZSYmKHQuX3N0YXJ0UmFuZ2U/ZS5lbmRMaW5lKCk8dC5fc3RhcnRSYW5nZS5lbmRMaW5lKCkmJih0Ll9zdGFydFJhbmdlPWUpOnQuX3N0YXJ0UmFuZ2U9ZSl9KSl9fSxwYXRoOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXRofX0sdHM6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RzfX0sX2J1aWxkRnVsbE5hbWVBbmRQYXRoOnt2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdO2UucHVzaCh0aGlzLl9uYW1lKTtmb3IodmFyIHQ9dGhpcy5fcGFyZW50O251bGwhPXQ7KXt2YXIgaT10Ll9uYW1lO2UucHVzaChpKSx0PXQuX3BhcmVudH1lLnJldmVyc2UoKSx0aGlzLl9mdWxsTmFtZT1lLmpvaW4oIuKYhiIpLHRoaXMuX3BhdGg9ZX19fSksZX0oKSk7dC5leHBvcnRzPWF9LHsiLi9lcnJvckVudHJ5Ijo3LCIuL3N0YWNrRW50cnkiOjExfV0sOTpbZnVuY3Rpb24oZSx0LGkpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGkgaW4gdCl7dmFyIG49dFtpXTtuLmNvbmZpZ3VyYWJsZT0hMCxuLnZhbHVlJiYobi53cml0YWJsZT0hMCl9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSx0KX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKSxzPWZ1bmN0aW9uIG0oZSx0LGkpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KTtpZih2b2lkIDA9PT1uKXt2YXIgcz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1zP3ZvaWQgMDptKHMsdCxpKX1pZigidmFsdWUiaW4gbiYmbi53cml0YWJsZSlyZXR1cm4gbi52YWx1ZTt2YXIgcj1uLmdldDtpZih2b2lkIDAhPT1yKXJldHVybiByLmNhbGwoaSl9LHI9ZnVuY3Rpb24oZSx0KXtpZigiZnVuY3Rpb24iIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoZS5fX3Byb3RvX189dCl9LGE9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0sbz1lKCJwYXRoIiksbD1lKCJjaG9raWRhciIpLkZTV2F0Y2hlcix1PWUoIm1pbmltYXRjaCIpLGM9ZSgiLi4vc2hhcmVkL3V0aWxzIiksaD12b2lkIDAsZj0xZTMsZD01MDAsdj01MCxwPXthcGs6MSxibXA6MSxjZ206MSxnMzoxLGdpZjoxLGllZjoxLGlyeDoxLGpwZWc6MSxqcGc6MSxqcGU6MSxrdHg6MSxwbmc6MSxidGlmOjEsc2dpOjEsc3ZnOjEsc3ZnejoxLHRpZmY6MSx0aWY6MSxwc2Q6MSx1dmk6MSx1dnZpOjEsdXZnOjEsdXZ2ZzoxLGRqdnU6MSxkanY6MSxzdWI6MSxkd2c6MSxkeGY6MSxmYnM6MSxmcHg6MSxmc3Q6MSxtbXI6MSxybGM6MSxtZGk6MSx3ZHA6MSxucHg6MSx3Ym1wOjEseGlmOjEsd2VicDoxLCIzZHMiOjEscmFzOjEsY214OjEsZmg6MSxmaGM6MSxmaDQ6MSxmaDU6MSxmaDc6MSxpY286MSxzaWQ6MSxwY3g6MSxwaWM6MSxwY3Q6MSxwbm06MSxwYm06MSxwZ206MSxwcG06MSxyZ2I6MSx0Z2E6MSx4Ym06MSx4cG06MSx4d2Q6MSxiaW46MSx4bHM6MSx4bHN4OjEsemlwOjEsbXA0OjF9LGc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gaSh0LG4pe2EodGhpcyxpKSxzKE9iamVjdC5nZXRQcm90b3R5cGVPZihpLnByb3RvdHlwZSksImNvbnN0cnVjdG9yIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMuX2RpZmZNYXRjaFBhdGNoPW4uZGlmZk1hdGNoUGF0Y2gsdGhpcy5fYmFzZURpcj10LHRoaXMuX2lzUmVhZHk9ITEsdGhpcy5faXNTdG9wcGVkPSExLHRoaXMuX2ZpbGVzQnlQYXRoPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZmlsZXNCeUlkPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZmlsZUlkPTAsdGhpcy5fbHJ1Q2FjaGU9ZSgibHJ1LWNhY2hlIikoe21heDoxMDQ4NTc2KnYsbGVuZ3RoOmZ1bmN0aW9uKGUpe3JldHVybiBlLmxlbmd0aH19KSx0aGlzLl9yZWFkRmlsZVByb21pc2U9bi5yZWFkRmlsZVByb21pc2UsdGhpcy5fcmVhbHBhdGhTeW5jPW4ucmVhbHBhdGhTeW5jfXJldHVybiByKGksdCksbihpLHtzZXR1cDp7dmFsdWU6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcztoPWUoImRlYnVnIikoIndhbGxhYnk6ZnMiKTt2YXIgbj1bXSxzPVtdLHI9e30sYT0wO18uZWFjaCh0LGZ1bmN0aW9uKGUpe2UuaWdub3JlP3MucHVzaChlKToobi5wdXNoKGUpLGUub3JkZXI9KythKX0pO3ZhciB1PXRoaXMuX2lzSW5jbHVkZWQoaS5fYmFzZURpcixuLHMsciksYz17aWdub3JlSW5pdGlhbDohMSxpZ25vcmVQZXJtaXNzaW9uRXJyb3JzOiEwLHVzZVBvbGxpbmc6ImRhcndpbiI9PT1wcm9jZXNzLnBsYXRmb3JtfHwibGludXgiPT09cHJvY2Vzcy5wbGF0Zm9ybSxpZ25vcmVkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQmJiF0LmlzRGlyZWN0b3J5KCkmJiF1KGUsdCl9LGN3ZDppLl9iYXNlRGlyfTtpZih+aS5fYmFzZURpci5pbmRleE9mKCIoIil8fH5pLl9iYXNlRGlyLmluZGV4T2YoIikiKXx8fmkuX2Jhc2VEaXIuaW5kZXhPZigifCIpfHx+aS5fYmFzZURpci5pbmRleE9mKCJ7Iil8fH5pLl9iYXNlRGlyLmluZGV4T2YoIn0iKXx8fmkuX2Jhc2VEaXIuaW5kZXhPZigiKiIpfHx+aS5fYmFzZURpci5pbmRleE9mKCJbIil8fH5pLl9iYXNlRGlyLmluZGV4T2YoIl0iKSl0aHJvdyBuZXcgRXJyb3IoIllvdXIgcHJvamVjdCBmaWxlIHBhdGggY29udGFpbnMgZ2xvYiBjaGFyYWN0ZXJzLCBsaWtlIGB7YCwgYH1gLCBgW2AsIGBdYCwgYChgLCBgKWAsIGAqYCwgYHxgIGFuZCBpdCBtYXkgY2F1c2UgdGhlIHByb2plY3QgZmlsZSBzY2FubmluZyB0byBmYWlsLCBwbGVhc2UgcmVtb3ZlIGdsb2IgY2hhcmFjdGVycyBmcm9tIHRoZSBwcm9qZWN0IHBhdGguIik7dGhpcy5fd2F0Y2hlcj1uZXcgbChjKTt2YXIgdj1fLnJlZHVjZShuLGZ1bmN0aW9uKGUsdCl7dmFyIG49aS5fZ2V0QmFzZURpcih0LnBhdHRlcm4pO3JldHVybiBlW25dPW4sZX0se30pO18uZWFjaCh2LGZ1bmN0aW9uKGUpe2lmKCFfLmZpbmQodixmdW5jdGlvbih0KXtyZXR1cm4gdCE9PWUmJmUuc3Vic3RyKDAsdC5sZW5ndGgrMSk9PT10KyIvIn0pKXt2YXIgdD12b2lkIDAsbj1vLm5vcm1hbGl6ZShvLmpvaW4oaS5fYmFzZURpcixlKSk7dHJ5e3Q9by5ub3JtYWxpemUoaS5fcmVhbHBhdGhTeW5jKG4pKX1jYXRjaChzKXt9dCYmdCE9PW4/KGgoIlN5bWxpbms6ICVzIC0+ICVzIix0LG4pLHJbdF09e3JlYWxQYXRoOnQsbGlua2VkUGF0aDpufSxpLl93YXRjaGVyLmFkZCh0KSk6aS5fd2F0Y2hlci5hZGQoZSl9fSk7dmFyIHA9dm9pZCAwO3JldHVybiBRLnByb21pc2UoZnVuY3Rpb24oZSx0KXt2YXIgbj1mdW5jdGlvbih0KXtpLl9pc1JlYWR5fHwoaS5faXNSZWFkeT0hMCx0JiZoKCJGaWxlIHN5c3RlbSBzY2FuIGhhcyBmaW5pc2hlZCBieSB0aW1lb3V0IiksZShpLl9maWxlc0J5UGF0aCkpfTt0cnl7aS5fd2F0Y2hlci5vbigiYWxsIixmdW5jdGlvbigpe2NsZWFyVGltZW91dChwKSxwPXNldFRpbWVvdXQoXy5iaW5kKG4sbnVsbCwhMCksZil9KS5vbigiYWRkIixfLmJpbmQoaS5fd2l0aE5vcm1hbGl6ZWRQYXRoLGksaS5fZmlsZUFkZGVkKSkub24oImNoYW5nZSIsXy5iaW5kKGkuX3dpdGhOb3JtYWxpemVkUGF0aCxpLGkuX2ZpbGVDaGFuZ2VkKSkub24oInVubGluayIsXy5iaW5kKGkuX3dpdGhOb3JtYWxpemVkUGF0aCxpLGkuX2ZpbGVEZWxldGVkKSkub24oInJlYWR5IixfLmRlYm91bmNlKG4sZCkpLm9uKCJlcnJvciIsXy5iaW5kKGkuZW1pdCxpLCJlcnJvciIpKX1jYXRjaChzKXt0KHMpfX0pfX0sbG9hZEZpbGVzOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBRLmFsbChfLm1hcChlLGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9sb2FkRmlsZShlKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiB0LmVtaXQoImxvYWRlZCIsZSl9KX0pKX19LGZpbGVDaGFuZ2VkSW5FZGl0b3I6e3ZhbHVlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzLl9maWxlc0J5UGF0aFtlXTtpZihuKXtoKCJGaWxlIGNoYW5nZWQgaW4gZWRpdG9yOiAlcyIsbi5wYXRoKTt2YXIgcz10aGlzLl9scnVDYWNoZS5nZXQobi5wYXRoKTt0aGlzLl9scnVDYWNoZS5zZXQobi5wYXRoLHQpLG4uY2hhbmdlVHMrKyx0aGlzLl9lbWl0RmlsZUNoYW5nZShfLmV4dGVuZCh7fSxuLHtjb250ZW50OnR9KSxzLGkpfX19LHN0b3A6e3ZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5faXNTdG9wcGVkPSEwLHRoaXMuX3dhdGNoZXImJih0aGlzLl93YXRjaGVyLmNsb3NlKCksZGVsZXRlIHRoaXMuX2xydUNhY2hlKX19LGlkQnlQYXRoOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9maWxlc0J5UGF0aFtlXTtpZih0KXJldHVybiB0LmlkfX0sX2xvYWRGaWxlOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9maWxlc0J5SWRbZV07aWYoIXQpdGhyb3cgbmV3IEVycm9yKCJObyBmaWxlIHdpdGggaWQgIitlKyIgZm91bmQiKTtyZXR1cm4gdGhpcy5fbG9hZEZpbGVXaXRoQ2FjaGUodCl9fSxfbG9hZEZpbGVXaXRoQ2FjaGU6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsaT1lLmNoYW5nZVRzLG49dGhpcy5fbHJ1Q2FjaGUuZ2V0KGUucGF0aCk7cmV0dXJuKF8uaXNVbmRlZmluZWQobik/dGhpcy5fcmVhZEZpbGVQcm9taXNlKG8uam9pbih0Ll9iYXNlRGlyLGUucGF0aCkpOlEud2hlbihuKSkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gbj1uP2UuYmluYXJ5P24udG9TdHJpbmcoImJhc2U2NCIpOm4udG9TdHJpbmcoKToiIix0Ll9pc1N0b3BwZWR8fGkhPT1lLmNoYW5nZVRzfHx0Ll9scnVDYWNoZS5zZXQoZS5wYXRoLG4pLFEud2hlbihfLmV4dGVuZCh7fSxlLHtjb250ZW50Om59KSl9KS5mYWlsKGZ1bmN0aW9uKGUpe3JldHVybiB0LmVtaXQoZSl9KX19LF9maWxlQWRkZWQ6e3ZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcyxuPXRoaXM7aCgiRmlsZSBhZGRlZDogJXMiLGUpLHQmJnQubWV0YWRhdGE/IWZ1bmN0aW9uKCl7dmFyIHM9dC5tZXRhZGF0YSxyPW8uZXh0bmFtZShlKS5zdWJzdHIoMSk7cy5jaGFuZ2VUcz0xLHMuaWQ9KytpLl9maWxlSWQscy50cz10Lm10aW1lLmdldFRpbWUoKSxzLnR5cGU9ciYmci50b0xvd2VyQ2FzZSgpLHMuYmluYXJ5PXBbcy50eXBlXSxzLnBhdGg9ZSxpLl9maWxlc0J5UGF0aFtlXT1zLGkuX2ZpbGVzQnlJZFtzLmlkXT1zLGkuX2lzUmVhZHkmJihpLl9scnVDYWNoZS5kZWwoZSksaS5fbG9hZEZpbGVXaXRoQ2FjaGUocykudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gbi5lbWl0KCJhZGRlZCIsZSl9KSl9KCk6aCgiTm8gbWV0YWRhdGEgZm9yIGFkZGVkIGZpbGUgZm91bmQ6ICVzIixlKX19LF9maWxlQ2hhbmdlZDp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxpPXRoaXM7aCgiRmlsZSBjaGFuZ2VkOiAlcyIsZSk7dmFyIG49dGhpcy5fZmlsZXNCeVBhdGhbZV07aWYobil7aWYodGhpcy5faXNSZWFkeSl7dmFyIHM7IWZ1bmN0aW9uKCl7dmFyIHI9dC5fbHJ1Q2FjaGUuZ2V0KGUpO3QuX2xydUNhY2hlLmRlbChlKSxzPSsrbi5jaGFuZ2VUcyx0Ll9sb2FkRmlsZVdpdGhDYWNoZShuKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNoYW5nZVRzPT09cyYmaS5fZW1pdEZpbGVDaGFuZ2UoZSxyKX0pfSgpfX1lbHNlIGgoIk5vIG1ldGFkYXRhIGZvciBjaGFuZ2VkIGZpbGUgZm91bmQ6ICVzIixlKX19LF9lbWl0RmlsZUNoYW5nZTp7dmFsdWU6ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWUuY29udGVudDtpZihfLmlzU3RyaW5nKHQpKXt2YXIgcz10aGlzLl9kaWZmTWF0Y2hQYXRjaC5wYXRjaF9tYWtlKHQsbik7aWYoIXMubGVuZ3RoKXJldHVybiBoKCJObyBjaGFuZ2VzIGRldGVjdGVkIGZvciAlcyIsZS5wYXRoKSx2b2lkIHRoaXMuZW1pdCgibm90Q2hhbmdlZCIsZSxuLGkpO2UuY29udGVudD10aGlzLl9kaWZmTWF0Y2hQYXRjaC5wYXRjaF90b1RleHQocyl9dGhpcy5lbWl0KCJjaGFuZ2VkIixlLG4saSl9fSxfZmlsZURlbGV0ZWQ6e3ZhbHVlOmZ1bmN0aW9uKGUpe2goIkZpbGUgZGVsZXRlZDogJXMiLGUpLHRoaXMuX2xydUNhY2hlLmRlbChlKTt2YXIgdD10aGlzLl9maWxlc0J5UGF0aFtlXTt0PyhkZWxldGUgdGhpcy5fZmlsZXNCeVBhdGhbZV0sZGVsZXRlIHRoaXMuX2ZpbGVzQnlJZFt0LmlkXSx0aGlzLl9pc1JlYWR5JiZ0aGlzLmVtaXQoImRlbGV0ZWQiLHQpKTpoKCJObyBtZXRhZGF0YSBmb3IgZGVsZXRlZCBmaWxlIGZvdW5kOiAlcyIsZSl9fSxfd2l0aE5vcm1hbGl6ZWRQYXRoOnt2YWx1ZTpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIGkmJmkubGlua2VkUGF0aCYmKHQ9aS5saW5rZWRQYXRoKSxlLmNhbGwodGhpcyxjLm5vcm1hbGl6ZVBhdGgodCksaSl9fSxfaXNJbmNsdWRlZDp7dmFsdWU6ZnVuY3Rpb24oZSx0LGksbil7cmV0dXJuIGZ1bmN0aW9uKHMscil7dmFyIGE9dm9pZCAwLGw9dm9pZCAwO2lmKDA9PT1zLmluZGV4T2YoZSkpcz1vLnJlbGF0aXZlKGUscyk7ZWxzZXtoKCJTeW1saW5rIHJlc29sdXRpb24gZm9yOiAlcyIscyk7dmFyIGM9bltzXTtpZihjKXM9by5yZWxhdGl2ZShlLGMubGlua2VkUGF0aCk7ZWxzZXt2YXIgZj1fLmZpbmQobixmdW5jdGlvbihlLHQpe3JldHVybiAwPT09cy5pbmRleE9mKHQpfSk7aWYoIWYpcmV0dXJuITE7cz1vLnJlbGF0aXZlKGUscy5yZXBsYWNlKGYucmVhbFBhdGgsZi5saW5rZWRQYXRoKSl9ciYmKHIubGlua2VkUGF0aD1zKX1mb3IodmFyIGQ9MCx2PWkubGVuZ3RoO3Y+ZDtkKyspe3ZhciBwPWlbZF0sZz1wLnRlc3Q7aWYoKCFhfHxnKSYmdShzLHAucGF0dGVybikpe2lmKGcpe2w9cDticmVha31hPXB9fWlmKGEmJmwpcmV0dXJuITE7dmFyIG09Xy5jbG9uZShfLmZpbmQodCxmdW5jdGlvbihlKXtyZXR1cm4oIWEmJiFlLnRlc3R8fCFsJiZlLnRlc3QpJiZ1KHMsZS5wYXR0ZXJuKX0pKTtyZXR1cm4gciYmKHIubWV0YWRhdGE9bSksISFtfX19LF9nZXRCYXNlRGlyOnt2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gYy5ub3JtYWxpemVQYXRoKGUucmVwbGFjZSgvW1wvXFxdW15cL1xcXSpcKi4qJC8sIiIpLnJlcGxhY2UoL1tcL1xcXVteXC9cXF0qW1whXCtdXCguKiQvLCIiKS5yZXBsYWNlKC9bXC9cXF1bXlwvXFxdKlwpXD8uKiQvLCIiKXx8by5zZXApfX19KSxpfShFdmVudEVtaXR0ZXIpO3QuZXhwb3J0cz1nfSx7Ii4uL3NoYXJlZC91dGlscyI6MTUsY2hva2lkYXI6dm9pZCAwLGRlYnVnOnZvaWQgMCwibHJ1LWNhY2hlIjp2b2lkIDAsbWluaW1hdGNoOnZvaWQgMCxwYXRoOnZvaWQgMH1dLDEwOltmdW5jdGlvbihlLHQsaSl7InVzZSBzdHJpY3QiO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaSBpbiB0KXt2YXIgbj10W2ldO24uY29uZmlndXJhYmxlPSEwLG4udmFsdWUmJihuLndyaXRhYmxlPSEwKX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLHQpfXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpLHM9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0scj1lKCJkZ3JhbSIpLGE9ZSgib3MiKSxvPWUoIi4vLi4vLi4vdXRpbHMiKSxsPW8ucmFuZG9tSWQoKSx1PWkub3B0aW9ucz17dHRsOjEyOCxhZGRyZXNzOiIyMzAuMC4wLjMiLHBvcnQ6NTYzOTh9LGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7cyh0aGlzLGUpO3RyeXt2YXIgdD10aGlzO3RoaXMuX2xpc3RlbmVycz17fSx0aGlzLl9zZW5kZXI9ci5jcmVhdGVTb2NrZXQoInVkcDQiKSx0aGlzLl9zZW5kZXIuYmluZChmdW5jdGlvbigpe3QuX3NlbmRlci5zZXRCcm9hZGNhc3QoITApLHQuX3NlbmRlci5zZXRNdWx0aWNhc3RUVEwodS50dGwpfSksdGhpcy5fc2VuZGVyLm9uKCJlcnJvciIsZnVuY3Rpb24oKXt0cnl7dC5fc2VuZGVyLmNsb3NlKCl9Y2F0Y2goZSl7fX0pLHRoaXMuX3JlY2VpdmVyPXIuY3JlYXRlU29ja2V0KCJ1ZHA0IiksdGhpcy5fcmVjZWl2ZXIub24oImxpc3RlbmluZyIsZnVuY3Rpb24oKXt0cnl7dC5fcmVjZWl2ZXIuc2V0QnJvYWRjYXN0KCEwKSx0Ll9yZWNlaXZlci5zZXRNdWx0aWNhc3RUVEwodS50dGwpLHQuX3JlY2VpdmVyLmFkZE1lbWJlcnNoaXAodS5hZGRyZXNzKX1jYXRjaChlKXt9fSksdGhpcy5fcmVjZWl2ZXIub24oIm1lc3NhZ2UiLGZ1bmN0aW9uKGUpe3RyeXtlPUpTT04ucGFyc2UoZS50b1N0cmluZygidXRmOCIpKSxlLmV2ZW50JiZlLnNvdXJjZSYmZS5zb3VyY2VJZCYmZS5zb3VyY2UhPT10Ll9zb3VyY2UoKSYmZS5zb3VyY2VJZCE9PWwmJl8uZWFjaCh0Ll9saXN0ZW5lcnNbZS5ldmVudF0sZnVuY3Rpb24odCl7dC5hcHBseShudWxsLFtlLmRhdGEsZS5zb3VyY2VdKX0pfWNhdGNoKGkpe319KSx0aGlzLl9yZWNlaXZlci5vbigiZXJyb3IiLGZ1bmN0aW9uKCl7dHJ5e3QuX3JlY2VpdmVyLmNsb3NlKCl9Y2F0Y2goZSl7fX0pLHRoaXMuX3JlY2VpdmVyLmJpbmQodS5wb3J0KX1jYXRjaChpKXt9fXJldHVybiBuKGUse29uOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX2xpc3RlbmVycyYmKHRoaXMuX2xpc3RlbmVyc1tlXXx8KHRoaXMuX2xpc3RlbmVyc1tlXT1bXSksdGhpcy5fbGlzdGVuZXJzW2VdLnB1c2godCkpfX0sZW1pdDp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIGk9bmV3IEJ1ZmZlcihKU09OLnN0cmluZ2lmeSh7ZXZlbnQ6ZSxkYXRhOnQsc291cmNlOnRoaXMuX3NvdXJjZSgpLHNvdXJjZUlkOmx9KSk7dGhpcy5fc2VuZGVyLnNlbmQoaSwwLGkubGVuZ3RoLHUucG9ydCx1LmFkZHJlc3MpfWNhdGNoKG4pe319fSxfc291cmNlOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBhLmhvc3RuYW1lKCkrIiAoIitlLl9nZXRJUHY0QWRkcmVzcygpKyIpIn19LHN0b3A6e3ZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3RoaXMuX3NlbmRlci5jbG9zZSgpfWNhdGNoKGUpe310cnl7dGhpcy5fcmVjZWl2ZXIuY2xvc2UoKX1jYXRjaChlKXt9fX19LHtfZ2V0SVB2NEFkZHJlc3M6e3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9IiI7cmV0dXJuIF8uZWFjaChhLm5ldHdvcmtJbnRlcmZhY2VzKCksZnVuY3Rpb24odCl7aWYoIWUpZm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07aWYoIklQdjQiPT09bi5mYW1pbHkmJiIxMjcuMC4wLjEiIT09bi5hZGRyZXNzJiYhbi5pbnRlcm5hbClyZXR1cm4gdm9pZChlPW4uYWRkcmVzcyl9fSksZXx8IjAuMC4wLjAifX19KSxlfSgpO3QuZXhwb3J0cz1uZXcgY30seyIuLy4uLy4uL3V0aWxzIjoxNixkZ3JhbTp2b2lkIDAsb3M6dm9pZCAwfV0sMTE6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe2lmKHModGhpcyxlKSxhcmd1bWVudHMubGVuZ3RoPjEpdGhpcy5fZmlsZUlkPWFyZ3VtZW50c1swXSx0aGlzLl9saW5lPWFyZ3VtZW50c1sxXTtlbHNlIGlmKGFyZ3VtZW50cy5sZW5ndGgpe3ZhciB0PWFyZ3VtZW50c1swXS5zcGxpdCgiXyIpO3RoaXMuX2ZpbGVJZD1wYXJzZUludCh0WzBdLDEwKSx0aGlzLl9saW5lPXBhcnNlSW50KHRbMV0sMTApfX1yZXR1cm4gbihlLHtrZXk6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZpbGVJZCsiXyIrdGhpcy5fbGluZX19LGZpbGVJZDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZmlsZUlkfX0sbGluZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGluZX19LHNldEZpbGU6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2ZpbGU9ZX19LGZpbGVQYXRoOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9maWxlJiZ0aGlzLl9maWxlLnBhdGgoKX19LHNldFJhbmdlOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9yYW5nZT1lfX0scmFuZ2U6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JhbmdlfX19KSxlfSgpO3QuZXhwb3J0cz1yfSx7fV0sMTI6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ModGhpcyxlKSx0aGlzLl90ZXN0cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2ZhaWxpbmdUZXN0cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2dsb2JhbEVycm9ycz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2NoYW5nZWQ9ITB9cmV0dXJuIG4oZSx7dGVzdHNSZW1vdmVkOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO18uZWFjaChlLGZ1bmN0aW9uKGUpe3ZhciBpPWUua2V5KCksbj0hIXQuX2ZhaWxpbmdUZXN0c1tpXTtkZWxldGUgdC5fdGVzdHNbaV0sZGVsZXRlIHQuX2ZhaWxpbmdUZXN0c1tpXSx0Ll9jaGFuZ2VkPW58fHQuX2NoYW5nZWR9KX19LHRlc3RBZGRlZDp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5rZXkoKSxpPXRoaXMuX3Rlc3RzW3RdO3RoaXMuX3Rlc3RzW3RdPWUsZGVsZXRlIHRoaXMuX2ZhaWxpbmdUZXN0c1t0XSxlLmlzRmFpbGluZygpJiYodGhpcy5fZmFpbGluZ1Rlc3RzW3RdPWUpLHRoaXMuX2NoYW5nZWQ9IWl8fGkmJmkuaXNGYWlsaW5nKCl8fGUuaXNGYWlsaW5nKCl8fHRoaXMuX2NoYW5nZWR9fSxsYXRlc3RGYWlsaW5nVGVzdDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy5sYXN0KF8udmFsdWVzKHRoaXMuX2ZhaWxpbmdUZXN0cykpfX0scmVwb3J0RmFpbGVkUnVuOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9jaGFuZ2VkPSEwLHRoaXMuX3J1bkVycm9yPWV9fSxyZXBvcnROb3JtYWxSdW46e3ZhbHVlOmZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuX3J1bkVycm9yfX0scmVwb3J0R2xvYmFsRXJyb3JzOnt2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLGk9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl9jaGFuZ2VkPXRoaXMuX2NoYW5nZWR8fF8uc2l6ZSh0aGlzLl9nbG9iYWxFcnJvcnMpIT09ZS5sZW5ndGgsXy5lYWNoKGUsZnVuY3Rpb24oZSl7dmFyIG49ZS5rZXkoKTtkZWxldGUgdC5fZ2xvYmFsRXJyb3JzW25dLGlbbl09ZX0pLHRoaXMuX2NoYW5nZWQ9dGhpcy5fY2hhbmdlZHx8IV8uaXNFbXB0eSh0aGlzLl9nbG9iYWxFcnJvcnMpLHRoaXMuX2dsb2JhbEVycm9ycz1pfX0sZnVsbFJlcG9ydElmQ2hhbmdlZDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hhbmdlZD8oZGVsZXRlIHRoaXMuX2NoYW5nZWQsdGhpcy5mdWxsUmVwb3J0KCkpOnZvaWQgMH19LGZ1bGxSZXBvcnQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bkVycm9yfHx7dG90YWxOdW1iZXI6Xy5zaXplKHRoaXMuX3Rlc3RzKSxmYWlsaW5nTnVtYmVyOl8uc2l6ZSh0aGlzLl9mYWlsaW5nVGVzdHMpLGVycm9yczp0aGlzLl9tYXBFcnJvcnModGhpcy5fZ2xvYmFsRXJyb3JzKSx0ZXN0czp0aGlzLl9tYXBUZXN0cyh0aGlzLl9mYWlsaW5nVGVzdHMpLnJldmVyc2UoKS52YWx1ZSgpfX19LGxpbmVSZXBvcnQ6e3ZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJue3Rlc3RzOnRoaXMuX21hcFRlc3RzKGUubGluZUNvdmVyaW5nVGVzdHNPcmRlcmVkQnlGYWlsaW5nVGhlbkRhdGUodCkpfX19LF9tYXBUZXN0czp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gXyhlKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue2ZhaWxpbmc6ZS5pc0ZhaWxpbmcoKSxsb2M6dC5fcmFuZ2VUb0xvYyhlLnN0YXJ0UmFuZ2UoKSksZmlsZTplLmZpbGVQYXRoKCksdGltZTplLnRpbWUoKSxlcnJvcnM6dC5fbWFwRXJyb3JzKGUuZXJyb3JzKCkpLHBhdGg6ZS5wYXRoKCksbWVzc2FnZXM6Xy5tYXAoZS5jb25zb2xlTWVzc2FnZXMoKSxmdW5jdGlvbihlKXtyZXR1cm57dHlwZTplLnR5cGUoKSx0ZXh0OmUudGV4dCgpLGZpbGU6ZS5maWxlKCkmJmUuZmlsZSgpLnBhdGgoKSxsb2M6dC5fcmFuZ2VUb0xvYyhlLnJhbmdlKCkpfHxlLmxpbmUoKX19KX19KX19LF9tYXBFcnJvcnM6e3ZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIF8ubWFwKGUsZnVuY3Rpb24oZSl7cmV0dXJue21lc3NhZ2U6ZS5tZXNzYWdlKCksc3RhY2s6Xy5tYXAoZS5zdGFjaygpLGZ1bmN0aW9uKGUpe3JldHVybntmaWxlOmUuZmlsZVBhdGgoKSxsb2M6dC5fcmFuZ2VUb0xvYyhlLnJhbmdlKCkpfHxlLmxpbmUoKX19KSxleHBlY3RlZDplLmV4cGVjdGVkKCksYWN0dWFsOmUuYWN0dWFsKCl9fSl9fSxfcmFuZ2VUb0xvYzp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuc3RhcnRMaW5lKCkrIjoiK2Uuc3RhcnRDb2x1bW4oKXx8dm9pZCAwfX19KSxlfSgpO3QuZXhwb3J0cz1yfSx7fV0sMTM6W2Z1bmN0aW9uKGUsdCxpKXsidXNlIHN0cmljdCI7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpIGluIHQpe3ZhciBuPXRbaV07bi5jb25maWd1cmFibGU9ITAsbi52YWx1ZSYmKG4ud3JpdGFibGU9ITApfU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsdCl9cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCkscz1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSxyPWUoIi4vY292ZXJhYmxlUmFuZ2UiKSxhPWUoIi4vZG9jdW1lbnRJbkVkaXRvciIpLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ModGhpcyxlKSx0aGlzLl9kYXRhPXQsdGhpcy5fcmFuZ2VDb25zb2xlTG9nPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fcmFuZ2VzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fbmV3UmFuZ2VzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fYWZmZWN0ZWRSYW5nZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9vdXRkYXRlZFJhbmdlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2xpbmVUb1JhbmdlTWFwPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fdGVzdE1hcD1PYmplY3QuY3JlYXRlKG51bGwpfXJldHVybiBuKGUse3NldFJhbmdlQ29uc29sZUxvZzp7dmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9yYW5nZUNvbnNvbGVMb2dbci5yYW5nZUtleSh0KV09ZX19LHJhbmdlczp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmFuZ2VzfX0sdXBkYXRlRG9jdW1lbnQ6e3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9Xy5leHRlbmQoe30sdGhpcy5fbmV3UmFuZ2VzLHRoaXMuX2FmZmVjdGVkUmFuZ2VzLHRoaXMuX291dGRhdGVkUmFuZ2VzKSx0PXRoaXMuX2FsbFJhbmdlc1JlY2VpdmVkLGk9dGhpcy5faW52YWxpZGF0ZURvY3VtZW50O2lmKGRlbGV0ZSB0aGlzLl9hbGxSYW5nZXNSZWNlaXZlZCxkZWxldGUgdGhpcy5faW52YWxpZGF0ZURvY3VtZW50LF8uZWFjaCh0aGlzLl9vdXRkYXRlZFJhbmdlcyxmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNwb3NlKCl9KSx0aGlzLl9uZXdSYW5nZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9hZmZlY3RlZFJhbmdlcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX291dGRhdGVkUmFuZ2VzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZG9jdW1lbnRJbkVkaXRvcil7dmFyIG49aT90aGlzLl9kb2N1bWVudEluRWRpdG9yLnVwZGF0ZShfLnZhbHVlcyh0aGlzLl9yYW5nZXMpLCEwLCEwKTp0aGlzLl9kb2N1bWVudEluRWRpdG9yLnVwZGF0ZShlLHQsITEpO3JldHVybiBuLmZ1bGxVcGRhdGU9aSxufX19LGFsbExpbmVzOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kb2N1bWVudEluRWRpdG9yP3RoaXMuX2RvY3VtZW50SW5FZGl0b3IuYWxsTGluZXMoKTp2b2lkIDB9fSxvcGVuZWRJbkVkaXRvcjp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9kb2N1bWVudEluRWRpdG9yfHwodGhpcy5fZG9jdW1lbnRJbkVkaXRvcj1uZXcgYSx0aGlzLl9kb2N1bWVudEluRWRpdG9yLnVwZGF0ZShfLnZhbHVlcyh0aGlzLl9yYW5nZXMpLCExLCEwKSl9fSxjbG9zZWRJbkFsbEVkaXRvcnM6e3ZhbHVlOmZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuX2RvY3VtZW50SW5FZGl0b3J9fSxpc09wZW5lZEluRWRpdG9yOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kb2N1bWVudEluRWRpdG9yfX0sc2hpZnREb2N1bWVudExpbmVzOnt2YWx1ZTpmdW5jdGlvbihlLHQsaSl7dGhpcy5fZG9jdW1lbnRJbkVkaXRvciYmdGhpcy5fZG9jdW1lbnRJbkVkaXRvci5zaGlmdExpbmVzKGUsdCxpKX19LGludmFsaWRhdGVEb2N1bWVudExpbmVzOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9kb2N1bWVudEluRWRpdG9yJiZ0aGlzLl9kb2N1bWVudEluRWRpdG9yLmludmFsaWRhdGVMaW5lcyhlKX19LGludmFsaWRhdGVEb2N1bWVudDp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9kb2N1bWVudEluRWRpdG9yJiYodGhpcy5faW52YWxpZGF0ZURvY3VtZW50PSEwKX19LGhhc1ZhbGlkRG9jdW1lbnQ6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuX2ludmFsaWRhdGVEb2N1bWVudH19LGxpbmVUZXN0czp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2NvdmVyaW5nVGVzdHMoZSl9fSxsaW5lUmFuZ2VzOnt2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLl9kb2N1bWVudEluRWRpdG9yKXt2YXIgdD10aGlzLl9kb2N1bWVudEluRWRpdG9yLmxpbmUoZSk7aWYodClyZXR1cm4gdC5yYW5nZXMoKX19fSxjb3ZlcmluZ1Rlc3RzOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb3ZlcmluZ1Rlc3RzKCl9fSxsaW5lQ292ZXJpbmdUZXN0c09yZGVyZWRCeUZhaWxpbmdUaGVuRGF0ZTp7dmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gXy5jaGFpbih0aGlzLl9jb3ZlcmluZ1Rlc3RzKGUsdCkpLnNvcnRCeShmdW5jdGlvbihlKXtyZXR1cm4hZS5pc0ZhaWxpbmcoKX0pLnNvcnRCeShmdW5jdGlvbihlKXtyZXR1cm4tZS50cygpfSkudmFsdWUoKX19LF9jb3ZlcmluZ1Rlc3RzOnt2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPXZvaWQgMDtpZihlKXtpZighdGhpcy5fZG9jdW1lbnRJbkVkaXRvcilyZXR1cm5bXTtpZihpPXRoaXMuX2RvY3VtZW50SW5FZGl0b3IubGluZShlKSwhaSlyZXR1cm5bXX12YXIgbj1pP2kucmFuZ2VzKCk6dGhpcy5fcmFuZ2VzO3JldHVybiB0JiYobj1fLmZpbHRlcihuLHQpKSxfLnJlZHVjZShuLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8uZWFjaCh0LmNvdmVyaW5nVGVzdHMoKSxmdW5jdGlvbih0KXtlW3Qua2V5KCldPXR9KSxlfSx7fSl9fSxkaXNwb3NlOnt2YWx1ZTpmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLl9kb2N1bWVudEluRWRpdG9yLF8uZWFjaCh0aGlzLl9yYW5nZXMsZnVuY3Rpb24oZSl7cmV0dXJuIGUuZGlzcG9zZSgpfSksZGVsZXRlIHRoaXMuX3JhbmdlcyxkZWxldGUgdGhpcy5fdGVzdE1hcH19LHJhbmdlQ29uc29sZUxvZzp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3JhbmdlQ29uc29sZUxvZ1tlLmtleSgpXX19LGNsZWFyUmFuZ2VDb25zb2xlTG9nOnt2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3JhbmdlQ29uc29sZUxvZz1PYmplY3QuY3JlYXRlKG51bGwpfX0sa2V5Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhLmlkfX0scGF0aDp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YS5wYXRofX0sYWRkVGVzdDp7dmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKSxpPXRoaXMuX3Rlc3RNYXBbZS5rZXkoKV07cmV0dXJuIGkmJl8uZWFjaChpLm9ic29sZXRlKCksZnVuY3Rpb24oZSl7dFtlLmtleSgpXT1lfSksdGhpcy5fdGVzdE1hcFtlLmtleSgpXT1lLGUuc2V0VGVzdEZpbGUodGhpcyksdH19LHJhbmdlQ292ZXJhZ2VDaGFuZ2VkOnt2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9hZmZlY3RlZFJhbmdlc1tlLmtleSgpXT1lfX0saXNUZXN0RmlsZTp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YS50ZXN0fX0sc2V0UmFuZ2VzOnt2YWx1ZTpmdW5jdGlvbihlLHQsaSl7dmFyIG49dGhpczt0aGlzLl9hbGxSYW5nZXNSZWNlaXZlZD10O3ZhciBzPSExLHI9bnVsbDt0JiZ0aGlzLl9yZWJ1aWxkUmFuZ2VNYXAoKTt2YXIgYT1PYmplY3QuY3JlYXRlKG51bGwpO18uZWFjaChlLGZ1bmN0aW9uKGUpe3ZhciBvPWUua2V5KCksbD1uLl9yYW5nZXNbb107cnx8Xy5pc0VtcHR5KGUuY292ZXJpbmdUZXN0cygpKXx8KHI9Xy5maXJzdChlLmNvdmVyaW5nVGVzdHMoKSkpLGw/KGwudXBkYXRlRnJvbShlLHQsaSksYVtvXT1sLG4uX2FmZmVjdGVkUmFuZ2VzW29dPWwpOihuLl9yYW5nZXNbb109ZSxuLl9uZXdSYW5nZXNbb109ZSxlLmF0dGFjaGVkVG9Tb3VyY2VGaWxlKCksZS5pc0NvdmVyZWQoKXx8KHM9ITApKX0pLHQmJih0aGlzLl9saW5lVG9SYW5nZU1hcD1PYmplY3QuY3JlYXRlKG51bGwpLF8uZWFjaChfLnZhbHVlcyh0aGlzLl9yYW5nZXMpLGZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5KCk7aWYobi5fbmV3UmFuZ2VzW3RdfHxhW3RdKWZvcih2YXIgaT1lLnN0YXJ0TGluZSgpO2k8PWUuZW5kTGluZSgpO2krKyl7dmFyIHM9bi5fbGluZVRvUmFuZ2VNYXBbaV07KCFzfHxlLmlzSW5zaWRlT2YocykpJiYobi5fbGluZVRvUmFuZ2VNYXBbaV09ZSl9ZWxzZSBuLl9vdXRkYXRlZFJhbmdlc1t0XT1lLGRlbGV0ZSBuLl9yYW5nZXNbdF19KSl9fSxvd25UZXN0czp7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gXy52YWx1ZXModGhpcy5fdGVzdE1hcCl9fSxyZW1vdmVBbGxUZXN0czp7dmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBfLmVhY2godGhpcy5vd25UZXN0cygpLGZ1bmN0aW9uKHQpe18uZWFjaCh0Lm9ic29sZXRlKCksZnVuY3Rpb24odCl7ZVt0LmtleSgpXT10fSl9KSx0aGlzLl90ZXN0TWFwPU9iamVjdC5jcmVhdGUobnVsbCksZX19LGNsb3Nlc3RSYW5nZTp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2xpbmVUb1JhbmdlTWFwW2VdfX0sX3JlYnVpbGRSYW5nZU1hcDp7dmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5fcmFuZ2VzO3RoaXMuX3Jhbmdlcz1PYmplY3QuY3JlYXRlKG51bGwpLF8uZWFjaCh0LGZ1bmN0aW9uKHQpe3ZhciBpPXQua2V5KCksbj1lLl9yYW5nZXNbaV07ZS5fcmFuZ2VzW2ldPXQsbiYmbi5kaXNwb3NlKCl9KX19fSksZX0oKTt0LmV4cG9ydHM9b30seyIuL2NvdmVyYWJsZVJhbmdlIjo0LCIuL2RvY3VtZW50SW5FZGl0b3IiOjV9XSwxNDpbZnVuY3Rpb24oZSx0LGkpe3QuZXhwb3J0cz17bGluZVN0YXRlOntub3RDb3ZlcmVkOjEsZnVsbHlDb3ZlcmVkOjIscGFydGlhbGx5Q292ZXJlZDozLGVycm9yU291cmNlOjQsZXJyb3JQYXRoOjV9fX0se31dLDE1OltmdW5jdGlvbihlLHQsaSl7dC5leHBvcnRzPXtub3JtYWxpemVQYXRoOmZ1bmN0aW9uKGUpe3JldHVybiJ3aW4zMiI9PT1wcm9jZXNzLnBsYXRmb3JtJiZlP2UucmVwbGFjZSgvXFwvZywiLyIpOmV9LHBhcnNlS2V5OmZ1bmN0aW9uKGUpe3ZhciB0PXt9LGk9bmV3IEJ1ZmZlcihlLCJiYXNlNjQiKS50b1N0cmluZygpLnNwbGl0KCJcbiIpO3QubGljZW5zZWVOYW1lPWlbMF0sdC5saWNlbnNlVGFncz1pWzFdO3ZhciBuPXQubGljZW5zZVRhZ3Muc3BsaXQoIiwiKTtyZXR1cm4gbi5sZW5ndGg+PTEmJih0LmxpY2Vuc2VlRW1haWw9blswXSksbi5sZW5ndGg+PTImJih0LmxpY2Vuc2VkUHJvZHVjdD1uWzFdKSx0LmV4cGlyYXRpb25EYXRlU3RyaW5nPWlbMl0sdC5saWNlbnNlU2lnbmF0dXJlPWlbM10sdH19fSx7fV0sMTY6W2Z1bmN0aW9uKGUsdCxpKXt0LmV4cG9ydHM9e3JhbmRvbUlkOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLDUpfSxub29wVHJ1ZTpmdW5jdGlvbigpe3JldHVybiEwfSxub29wVHJ1ZVByb21pc2U6ZnVuY3Rpb24oKXtyZXR1cm4gUS5mY2FsbCh0aGlzLm5vb3BUcnVlKX0saXNQYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5sZW5ndGg+MiYmIkAiPT09ZVswXSYmIkAiPT09ZVsxXX0sdGV4dEluZGV4UG9zaXRpb246ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzLnRleHRMaW5lcyhlLHQpO3JldHVybntsaW5lOmkubGVuZ3RoLGNvbHVtbjppW2kubGVuZ3RoLTFdLmxlbmd0aH19LHRleHRMaW5lczpmdW5jdGlvbihlLHQpe3JldHVybiBlPV8uaXNVbmRlZmluZWQodCk/ZTplLnN1YnN0cigwLHQpLGUuc3BsaXQoL1xyXG58XHJ8XG4vKX19fSx7fV19LHt9LFsxXSk7